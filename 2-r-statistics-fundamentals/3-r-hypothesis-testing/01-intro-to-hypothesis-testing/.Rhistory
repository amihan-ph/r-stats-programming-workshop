summarise(mean_Total_Revenue = mean(Total.Revenue))
# View the result
print(mean_values)
# Get the mean value for "Stayed"
xbar_stayed <- mean_values$mean_Total_Revenue[mean_values$Customer.Status == "Stayed"]
# Get the mean value for "Churned"
xbar_churned <- mean_values$mean_Total_Revenue[mean_values$Customer.Status == "Churned"]
# Calculate the standard deviation using dplyr
std_values <- customer_churn %>%
group_by(Customer.Status) %>%
summarise(sd_Total_Revenue = sd(Total.Revenue))
# View the result
std_values
# Get the standard deviation value for "Started"
s_stayed <- std_values$sd_Total_Revenue[std_values$Customer.Status == "Stayed"]
# Get the standard deviation value for "Churned"
s_churned <- std_values$sd_Total_Revenue[std_values$Customer.Status == "Churned"]
# Calculate the sample size using dplyr
sample_size <- customer_churn %>%
group_by(Customer.Status) %>%
summarise(n = n())
# View the result
sample_size
# Remove "L" suffix from sample size values
sample_size$n <- as.numeric(sample_size$n)
# View the updated sample size
sample_size
# Access sample size value for "Stayed"
n_stayed <- sample_size$n[sample_size$Customer.Status == "Stayed"]
# Access sample size value for "Churned"
n_churned <- sample_size$n[sample_size$Customer.Status == "Churned"]
# The hypothesis test for determining if there is a difference between the means of two populations uses
# a different type of test statistic to the z-scores. It's called "t",
# and can be calculated from three values from each sample using this equation.
# The sample means for the two groups are available as xbar_stayed - xbar_churned.
# The sample standard deviations are s_stayed and s_churned. The sample sizes are n_stayed and n_churned.
# Calculate the numerator of the test statistic
numerator <- xbar_stayed - xbar_churned
# Calculate the denominator of the test statistic
denominator <- sqrt(s_stayed ^ 2 / n_stayed + s_churned ^ 2 / n_churned)
# Calculate the test statistic
t_stat <- numerator / denominator
# See the result
t_stat #When testing for differences between means, the test statistic is called 't' rather than 'z',
# and can be calculated using six numbers from the samples.
# stayed = customer_churn$Total.Revenue[customer_churn$Total.Revenue== 'Stayed']
# churned = customer_churn$Total.Revenue[customer_churn$Total.Revenue== 'Churned']
#
# t.test(stayed , churned,
#        paired = FALSE, var.equal = FALSE, conf.level = 0.95)
# Calculate the degrees of freedom
degrees_of_freedom <- n_stayed + n_churned - 2
# H0: MuRevenueStayed >= MuRevenueChurned
# Ha: MuRevenueStayed < MuRevenueChurned
# Calculate the p-value from the test stat
p_value <- pt(t_stat, df = degrees_of_freedom, lower.tail = TRUE)
# See the result
p_value
# See the result
p_value
# Calculate the p-value from the test stat
p_value <- pt(t_stat, df = degrees_of_freedom, lower.tail = FALSE)
# See the result
p_value
# Get the mean value for "Stayed"
xbar_stayed <- mean_values$mean_Total_Revenue[mean_values$Customer.Status == "Stayed"]
# Get the mean value for "Churned"
xbar_churned <- mean_values$mean_Total_Revenue[mean_values$Customer.Status == "Churned"]
# H0: MuRevenueChurned >= MuRevenueStayed
# Ha: MuRevenueChurned < MuRevenueStayed
# Calculate the p-value from the test stat
p_value <- pt(t_stat, df = degrees_of_freedom, lower.tail = right_join())
# H0: MuRevenueChurned >= MuRevenueStayed
# Ha: MuRevenueChurned < MuRevenueStayed
# Calculate the p-value from the test stat
p_value <- pt(t_stat, df = degrees_of_freedom, lower.tail = TRUE)
# See the result
p_value
# H0: MuRevenueChurned <=  MuRevenueStayed
# Ha: MuRevenueChurned > MuRevenueStayed
# Calculate the p-value from the test stat
p_value <- pt(t_stat, df = degrees_of_freedom, lower.tail = FALSE)
# See the result
p_value
# Calculate the p-value from the test stat
p_value <- pt(t_stat, df = degrees_of_freedom, lower.tail = FALSE)
# See the result
p_value
# Calculate the p-value from the test stat
p_value <- pt(t_stat, df = degrees_of_freedom, lower.tail = TRUE)
# See the result
p_value
# Calculate the p-value from the test stat
p_value <- pt(t_stat, df = degrees_of_freedom, lower.tail = TRUE)
# See the result
p_value
# There is strong evidence to support the alternative hypothesis that the mean revenue for the "Churned"
# group is indeed greater than the mean revenue for the "Stayed" group.
# Since the p-value is very low, we can reject the null hypothesis and conclude that there is a statistically
# significant difference between the two means. However, you might be wondering why the observed difference
# between the means is in the opposite direction (xbar_churned < xbar_stayed). In this case, the possibility
# is that the observed difference occurred by chance and is not statistically significant.
p_value <- pt(t_stat, df = degrees_of_freedom, lower.tail = TRUE)
# See the result
print(p_value)
p_value <- pt(t_stat, df = degrees_of_freedom, lower.tail = TRUE)
# See the result
print(p_value)
p_value <- pt(t_stat, df = degrees_of_freedom, lower.tail = FALSE)
# See the result
print(p_value)
customer_churn.columns
customer_churn.columns <- names(customer_churn)
print(customer_churn.columns)
# Create a new variable called monthly_charge_difference
customer_churn$monthly_charge_difference <- customer_churn$monthly_charges_after - customer_churn$monthly_charges_before
customer_churn <- customer_churn %>%
filter(!is.na(monthly_charges_after) & !is.na(monthly_charges_before))
# Create a new variable called monthly_charge_difference
# Filter the data to only include customers who have churned
churned_customers <- customer_churn %>%
filter(Customer.Status == "Churned")
# Calculate the difference in Total.Revenue between customers who have churned and customers who have churned and have more than 5000 in Total.Charges
difference_in_revenue <- churned_customers %>%
filter(Total.Charges > 5000) %>%
summarise(difference = sum(Total.Revenue) - sum(Total.Charges))
# Add the difference in revenue column to the customer_churn data frame
customer_churn <- customer_churn %>%
mutate(difference_in_revenue = difference_in_revenue$difference)
# View the customer_churn data frame
View(customer_churn)
# Filter the data to only include customers who have churned
churned_customers <- customer_churn %>%
filter(Customer.Status == "Churned")
# Calculate the difference in Total.Revenue between customers who have churned and customers who have churned and have more than 5000 in Total.Charges
difference_in_revenue <- churned_customers %>%
filter(Total.Charges > 5000) %>%
mutate(difference = Total.Revenue - Total.Charges)
# Add the difference in revenue column to the customer_churn data frame
customer_churn <- customer_churn %>%
left_join(difference_in_revenue, by = "CustomerID")
# Read the customer churn csv file
customer_churn <- read.csv("telecom_customer_churn.csv")
# Filter the data to only include customers who have churned
churned_customers <- customer_churn %>%
filter(Customer.Status == "Churned")
# Calculate the difference in Total.Revenue between customers who have churned and customers who have churned and have more than 5000 in Total.Charges
difference_in_revenue <- churned_customers %>%
filter(Total.Charges > 5000) %>%
mutate(difference = Total.Revenue - Total.Charges)
# Add the difference in revenue column to the customer_churn data frame
customer_churn <- customer_churn %>%
left_join(difference_in_revenue, by = "CustomerID")
churned_customers <- customer_churn %>%
filter(Customer.Status == "Churned")
# Calculate the difference in Total.Revenue between customers who have churned and customers who have churned and have more than 5000 in Total.Charges
difference_in_revenue <- churned_customers %>%
filter(Total.Charges > 5000) %>%
mutate(difference = Total.Revenue - Total.Charges)
# Add the difference in revenue column to the customer_churn data frame
customer_churn <- customer_churn %>%
left_join(difference_in_revenue, by = "Customer.ID")
# View the customer_churn data frame
View(customer_churn)
# Read the customer churn csv file
customer_churn <- read.csv("telecom_customer_churn.csv")
unique_customer_ids <- customer_churn %>%
distinct(Customer.ID)
# Print the unique Customer.Id values
print(unique_customer_ids)
customer_churn <- read.csv("telecom_customer_churn.csv")
# View the customer_churn dataset
View(customer_churn)
# Problem: The CEO of a telecommunication company called a stakeholders meeting. He had this intuition that
# he just needs to focus on those who stay and retain them because the revenue from the those who stayed is obviously
# be more than those who churned. 73% stayed is way higher than 27 churned, right?
# However, you interrupted (just kidding) the CEO saying that we should better be sure than sorry. ðŸ˜…
# The CEO is assuming that the generated revenue from each of the two groups are proportionally distributed.
# What if the company actually generates more money from those 26% of customers who left?
# And they left because they subscribed to something unreasonably expensive?
# Other underlying questions for future analyses based on this initiative are:
# Should we win them back?
# Are there similar behaviors among the churned customers, similar reasons for churning,
# that we should look out for those who stayed, so we can retain them?
# T-TEST
# To answer the question, you should to an independent two-sample t-test:
# This test is used to compare the means of a variable for two groups that are independent of each other.
# In a t-test, you should obtain the t-statistic (also known as the t-value). It is a measure that quantifies
# the difference between the means of two groups and indicates the likelihood of observing such a difference by chance alone.
# Data Scientist sets up the hypothesis:
# H0: MuRevenueChurned <= MuRevenueStayed
# Ha: MuRevenueChurned > MuRevenueStayed
# Get the unique Customer.Id values
unique_customer_ids <- customer_churn %>%
distinct(Customer.ID)
# Print the unique Customer.Id values
print(unique_customer_ids)
Unique_customer_churn <- customer_churn %>%
filter(Customer.Status %in% c("Stayed", "Churned")) %>%
distinct(Customer.ID)
View(Unique_customer_churn)
View(unique_customer_ids)
View(Unique_customer_churn)
Unique_customer_churn <- customer_churn %>%
filter(Customer.Status %in% c("Stayed", "Churned")) %>%
filter(distinct(Customer.ID))
Unique_customer_churn <- customer_churn %>%
filter(Customer.Status %in% c("Stayed", "Churned")) %>%
distinct(Customer.ID, .keep_all = TRUE)
unique_customer_churn <- customer_churn %>%
filter(Customer.Status %in% c("Stayed", "Churned")) %>%
distinct(Customer.ID, .keep_all = TRUE)
View(unique_customer_churn)
wd <- getwd()
setwd("C:/Users/sclau/Documents/r-stats-programming-workshop/2-r-statistics-fundamentals/3-r-hypothesis-testing/01-intro-to-hypothesis-testing")
# Load the customer churn csv file
customer_churn <- read.csv("telecom_unique_customer_churn.csv")
# Load the customer churn csv file
customer_churn <- read.csv("telecom_unique_customer_churn.csv")
setwd("C:/Users/sclau/Documents/r-stats-programming-workshop/2-r-statistics-fundamentals/3-r-hypothesis-testing/01-intro-to-hypothesis-testing")
# Load the customer churn csv file
customer_churn <- read.csv("telecom_customer_churn.csv")
view(customer_churn)
glimpse(customer_churn)
churned_customers %>%
distinct(Customer.ID)
customer_churn %>%
distinct(Customer.ID)
uniquecustomer_churn <- customer_churn %>%
filter(Customer.Status %in% c("Stayed", "Churned")) %>%
distinct(Customer.ID, .keep_all = TRUE)
View(unique_customer_churn)
View(uniquecustomer_churn)
wd <- getwd()
setwd("C:/Users/sclau/Documents/r-stats-programming-workshop/2-r-statistics-fundamentals/3-r-hypothesis-testing/01-intro-to-hypothesis-testing")
# Load the customer churn csv file
customer_churn <- read.csv("telecom_customer_churn.csv")
# View the unique_customer_churn dataset
view(customer_churn)
glimpse(customer_churn)
customer_churn %>%
distinct(Customer.ID)
unique_customer_churn <- customer_churn %>%
filter(Customer.Status %in% c("Stayed", "Churned")) %>%
distinct(Customer.ID, .keep_all = TRUE)
View(unique_customer_churn)
# Percentage of those who churned of the total sample
churned_prop_samp <- unique_customer_churn %>%
summarize(prop_churned_customers = mean(Customer.Status == "Churned")) %>%
# Extract the value from the dataframe
pull(prop_churned_customers)
# Print the results, the sample statistic churned_prop_samp.
print(churned_prop_samp)
# Let's make a hypothesis
# Hypothesize that the proportion is 20%
churned_prop_hyp <- 0.2
# Generate 1 bootstrap resample
unique_customer_churn_resample_1 <- unique_customer_churn %>%
slice_sample(prop = churned_prop_samp, replace = TRUE)
# Print the result
View(unique_customer_churn_resample_1)
# Calculate mean churn prop of resample
mean_churned_1 <- unique_customer_churn_resample_1 %>%
summarize(mean_danceability = mean(Customer.Status == "Churned")) %>%
pull(mean_danceability)
# Print the result
print(mean_churned_1)
mean_churned_1000 <- replicate(
n = 1000,
expr = {
# Resample the data
unique_customer_churn_resample <- unique_customer_churn %>%
slice_sample(prop = 1, replace = TRUE) %>%
# Calculate the summary stat
summarize(mean_churned = mean(Customer.Status == "Churned")) %>%
pull(mean_churned)
}
)
# Print the result
print(mean_churned_1000)
# Store the resamples in a tibble
unique_customer_churn_boot_distn <- tibble(
resample_mean = mean_churned_1000
)
# Plot a histogram  of the resample means with binwidth 0.01
unique_customer_churn_boot_distn %>%
ggplot(aes(x = resample_mean)) +
geom_histogram(binwidth = 0.002, fill = "royalblue4") +
labs(x = "Mean Churned", y = "Frequency", title = "Distribution of Resampled Mean Churned")
View(unique_customer_churn_boot_distn)
# Now you can obtain no. 3 requirement for the z_score
# Calculate the standard error, it is the standard deviation of the bootstrap distribution
std_error <- unique_customer_churn_boot_distn %>%
summarize(sd_churned_prop = sd(resample_mean)) %>%
pull(sd_churned_prop)
std_error
# Find z-score of churned_prop_samp
z_score <- (churned_prop_samp - churned_prop_hyp) / std_error
# Print the results
z_score # Is this high or low?
# Calculate the p-value
# Ha The proportion of Churned is greater than 20%
# When Ha is greater, lower.tail = FALSE
p_value <- pnorm(z_score, lower.tail = FALSE)
# Print the result
print(p_value)
mean(unique_customer_churn_boot_distn$resample_mean)
# Calculate 95% confidence interval using quantile method
conf_int_quantile <- unique_customer_churn_boot_distn %>%
summarize(lower = quantile(resample_mean, 0.025),
upper = quantile(resample_mean, 0.975)
)
# Print the result
conf_int_quantile
# Read the customer churn csv file
customer_churn <- read.csv("telecom_unique_customer_churn.csv")
# Get the unique Customer.Id values
customer_churn %>% distinct(Customer.ID)
wd <- getwd()
setwd("C:/Users/sclau/Documents/r-stats-programming-workshop/2-r-statistics-fundamentals/4-r-hypothesis-testing/02-two-sample-and-ANOVA-tests")
# Get the unique Customer.Id values
customer_churn %>%
distinct(Customer.ID)
# Read the customer churn csv file
customer_churn <- read.csv("telecom_customer_churn.csv")
# View the unique_customer_churn dataset
View(customer_churn)
# Get the unique Customer.Id values
customer_churn %>%
distinct(Customer.ID)
unique_customer_churn <- customer_churn %>%
filter(Customer.Status %in% c("Stayed", "Churned")) %>%
distinct(Customer.ID, .keep_all = TRUE)
View(unique_customer_churn)
# Calculate the separate means of the  two customer status groups
mean_values <- unique_customer_churn %>%
group_by(Customer.Status) %>%
summarise(mean_Total_Revenue = mean(Total.Revenue))
# View the result
print(mean_values)
# Get the mean value for "Stayed"
xbar_stayed <- mean_values$mean_Total_Revenue[mean_values$Customer.Status == "Stayed"]
# Get the mean value for "Churned"
xbar_churned <- mean_values$mean_Total_Revenue[mean_values$Customer.Status == "Churned"]
# Calculate the standard deviation using dplyr
std_values <- unique_customer_churn %>%
group_by(Customer.Status) %>%
summarise(sd_Total_Revenue = sd(Total.Revenue))
# View the result
std_values
# Get the standard deviation value for "Started"
s_stayed <- std_values$sd_Total_Revenue[std_values$Customer.Status == "Stayed"]
# Get the standard deviation value for "Churned"
s_churned <- std_values$sd_Total_Revenue[std_values$Customer.Status == "Churned"]
# Calculate the sample size using dplyr
sample_size <- unique_customer_churn %>%
group_by(Customer.Status) %>%
summarise(n = n())
# View the result
sample_size
# Remove "L" suffix from sample size values
sample_size$n <- as.numeric(sample_size$n)
# View the updated sample size
sample_size
# Access sample size value for "Stayed"
n_stayed <- sample_size$n[sample_size$Customer.Status == "Stayed"]
# Access sample size value for "Churned"
n_churned <- sample_size$n[sample_size$Customer.Status == "Churned"]
# Calculate the numerator of the test statistic
numerator <- xbar_stayed - xbar_churned
# Calculate the denominator of the test statistic
denominator <- sqrt(s_stayed ^ 2 / n_stayed + s_churned ^ 2 / n_churned)
# Calculate the test statistic
t_stat <- numerator / denominator
# See the result
t_stat #When testing for differences between means, the test statistic is called 't' rather than 'z',
# Calculate the degrees of freedom
degrees_of_freedom <- n_stayed + n_churned - 2
# Calculate the p-value from the test stat
p_value <- pt(t_stat, df = degrees_of_freedom, lower.tail = FALSE)
# See the result
print(p_value)
# Calculate the p-value from the test stat
p_value <- pt(t_stat, df = degrees_of_freedom, lower.tail = TRUE)
# See the result
print(p_value)
duplicated_customer_churn <- customer_churn %>%
filter(Customer.Status %in% c("Stayed", "Churned")) %>%
duplicated(Customer.ID, .keep_all = TRUE)
View(customer_churn)
churned_or_stayed_customers <- customer_churn %>%
filter(Customer.Status %in% c("Churned", "Stayed"))
# Find the duplicated Customer.Ids
duplicated_customer_ids <- churned_or_stayed_customers %>%
duplicated(.keep_all = TRUE)
# Keep only the rows with duplicated Customer.Ids
duplicated_churned_or_stayed_customers <- churned_or_stayed_customers[duplicated_customer_ids, ]
View(duplicated_churned_or_stayed_customers)
churned_or_stayed_customers <- customer_churn %>%
filter(Customer.Status %in% c("Churned", "Stayed")) %>%
duplicated(Customer.ID, .keep = TRUE)
# Read the customer churn csv file
customer_churn <- read.csv("telecom_customer_churn.csv")
# Filter the data to only include customers who have Churned or Stayed
duplicated_customers <- customer_churn %>%
filter(Customer.Status %in% c("Churned", "Stayed")) %>%
duplicated(Customer.ID, .keep = TRUE)
# Filter the data to only include customers who have Churned or Stayed
duplicated_customers <- customer_churn %>%
filter(Customer.Status %in% c("Churned", "Stayed")) %>%
filter(duplicated(Customer.ID) | duplicated(Customer.ID, fromLast = TRUE))
View(duplicated_customers)
# Get the unique Customer.Id values
customer_churn %>%
distinct(Customer.ID)
# Filter the data to only include customers who have Churned or Stayed
duplicated__customer_churn <- customer_churn %>%
filter(Customer.Status %in% c("Stayed", "Churned")) %>%
group_by(Customer.ID) %>%
filter(n() > 1)
# Calculate the mean total revenue per internet type
mean_std_values <- unique_customer_churn %>%
group_by(Internet.Type) %>%
summarise(xbar_Total_Revenue = mean(Total.Revenue),
s_Total_Revenue = sd(Total.Revenue))
# View the result
mean_std_values
ggplot(unique_customer_churn, aes(x = Internet.Type, y = Total.Revenue)) +
geom_boxplot() +
coord_flip()
# Run a linear regression of Total.Revenue vs. Internet.Type
mdl_total_revenue_vs_internet_type <- lm(Total.Revenue ~ Internet.Type, data = unique_customer_churn)
# Run a linear regression of Total.Revenue vs. Internet.Type
mdl_total_revenue_vs_internet_type <- lm(Total.Revenue ~ Internet.Type, data = unique_customer_churn)
# Print the results
summary(mdl_total_revenue_vs_internet_type)
test_results <- pairwise.t.test(
unique_customer_churn$Total.Revenue,
unique_customer_churn$Internet.Type,
p.adjust.method = "none"
)
# Print the results
test_results
# Perform ANOVA on the regression model
anova(mdl_total_revenue_vs_internet_type)
test_results <- pairwise.t.test(
unique_customer_churn$Total.Revenue,
unique_customer_churn$Internet.Type,
p.adjust.method = "none"
)
# Print the results
test_results
# Check for missing values
missing_rows <- !complete.cases(customer_churn$Internet.Type)
missing_rows <- !complete.cases(customer_churn$Internet.Type)
# Remove missing rows
customer_churn <- customer_churn[complete.cases(customer_churnr), ]
# Read the customer churn csv file
customer_churn <- read.csv("telecom_customer_churn.csv")
# Check for missing values
missing_rows <- !complete.cases(unique_customer_churn$Internet.Type)
# Get the unique Customer.Id values
customer_churn %>%
distinct(Customer.ID)
unique_customer_churn <- customer_churn %>%
filter(Customer.Status %in% c("Stayed", "Churned")) %>%
distinct(Customer.ID, .keep_all = TRUE)
View(unique_customer_churn)
missing_rows <- !complete.cases(unique_customer_churn$Internet.Type)
# Remove missing rows
unique_customer_churn_clean <- unique_customer_churn[complete.cases(unique_customer_churn), ]
# Take a peak of the data about the total revenue for each of the different internet types
ggplot(unique_customer_churn_clean, aes(x = Internet.Type, y = Total.Revenue)) +
geom_boxplot() +
coord_flip()
# Run a linear regression of Total.Revenue vs. Internet.Type
mdl_total_revenue_vs_internet_type <- lm(Total.Revenue ~ Internet.Type, data = unique_customer_churn)
# Perform ANOVA on the regression model
anova(mdl_total_revenue_vs_internet_type)
# Print the results
summary(mdl_total_revenue_vs_internet_type)
# Perform ANOVA on the regression model
anova(mdl_total_revenue_vs_internet_type)
# Run a linear regression of Total.Revenue vs. Internet.Type
mdl_total_revenue_vs_internet_type <- lm(Total.Revenue ~ Internet.Type, data = unique_customer_churn_clean)
# Print the results
summary(mdl_total_revenue_vs_internet_type)
# Perform ANOVA on the regression model
anova(mdl_total_revenue_vs_internet_type)
pairwise.t.test(unique_customer_churn_clean$Total.Revenue, unique_customer_churn_clean$Internet.Type, p.adjust.method="none")
test_results <- pairwise.t.test(
unique_customer_churn$Total.Revenue,
unique_customer_churn$Internet.Type,
p.adjust.method = "bonferroni"
)
test_results
test_results <- pairwise.t.test(
unique_customer_churn_clean$Total.Revenue,
unique_customer_churn_clean$Internet.Type,
p.adjust.method = "none"
)
# Print the res
# Print the results
test_results
test_results <- pairwise.t.test(
unique_customer_churn$Total.Revenue,
unique_customer_churn$Internet.Type,
p.adjust.method = "bonferroni"
)
test_results
# Other p-adjustment methods
p.adjust.methods
