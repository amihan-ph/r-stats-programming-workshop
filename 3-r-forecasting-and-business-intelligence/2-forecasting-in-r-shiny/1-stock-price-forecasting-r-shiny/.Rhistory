demo()
install.packages(c('quantmod','ff','foreign','R.matlab'),dependency=T)
suppressPackageStartupMessages(library(tidyverse, dplyr))
data("ToothGrowth")
head(ToothGrowth)
str(ToothGrowth)
hist(ToothGrowth$len)
# Shapiro-Wilk normality test
#H0: data are normally distributed
shapiro.test(ToothGrowth$len) #data are normally distributed
view(ToothGrowth)
data("ToothGrowth")
head(ToothGrowth)
str(ToothGrowth)
View(ToothGrowth)
data("ToothGrowth")
head(ToothGrowth)
library(dplyr) # for functions
install.packages("dplyr")
library("dplyr", lib.loc="C:/Users/sclau/anaconda3/envs/rstudio/lib/R/library")
library("dbplyr", lib.loc="C:/Users/sclau/anaconda3/envs/rstudio/lib/R/library")
library(dplyr) # for functions
read_fst(
path,
columns = NULL,
from = 1,
to = NULL,
as.data.table = FALSE,
old_format = FALSE
)
library(dplyr) # for functions
library(dplyr) # for functions
read_fst('late_shipments.fst')
read_fst('late_shipments.fst')
data("ToothGrowth")
head(ToothGrowth)
str(ToothGrowth)
hist(ToothGrowth$len)
shapiro.test(ToothGrowth$len) #data are normally distributed
library(ggplot2)
qplot(supp,len,data=ToothGrowth,
main="Tooth growth of guinea pigs",xlab="Supplement type", ylab="Tooth length") + geom_boxplot(aes(fill = supp))
install.packages('ggplot2', dep = TRUE),
library(ggplot2)
qplot(supp,len,data=ToothGrowth,
main="Tooth growth of guinea pigs",xlab="Supplement type", ylab="Tooth length") + geom_boxplot(aes(fill = supp))
install.packages('ggplot2', dep = TRUE),
library(ggplot2)
install.packages('ggplot2', dep = TRUE)
install.packages("ggplot2", dep = TRUE)
library(ggplot2)
install.packages('ggplot2')
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
install.packages("ggplot2", dependencies=TRUE, type="source")
View(ToothGrowth)
install.packages("ggplot2", dependencies=TRUE)
install.packages('ggplot2')
library(ggplot2)
data("ToothGrowth")
head(ToothGrowth)
str(ToothGrowth)
hist(ToothGrowth$len)
# Shapiro-Wilk normality test
#H0: data are normally distributed
shapiro.test(ToothGrowth$len) #data are normally distributed
library(ggplot2)
qplot(supp,len,data=ToothGrowth,
main="Tooth growth of guinea pigs",xlab="Supplement type", ylab="Tooth length") + geom_boxplot(aes(fill = supp))
View(ToothGrowth)
shapiro.test(ToothGrowth$len)
mean(ToothGrowth$len)
t.test(ToothGrowth$len,mu=18)
### one sided t-test
### test if the mean value is equal to a certain number
### H0: true value of mean=18
t.test(ToothGrowth$len,mu=10)
### one sided t-test
### test if the mean value is equal to a certain number
### H0: true value of mean=18
t.test(ToothGrowth$len,mu=18)
install.packages("dplyr")
install.packages("fst")
# Read an FST file
late_shipments <- read_fst("late_shipments.fst")
library(dplyr) # for functions
library(fst)
# Read an FST file
late_shipments <- read_fst("late_shipments.fst")
# Read an FST file
late_shipments <- read_fst("/Users/sclau/Documents/01-upskill/DataCamp/datacamp-notes/Statistics Fundamentals with R.fst")
OJ = ToothGrowth$len[ToothGrowth$supp == 'OJ']
VC = ToothGrowth$len[ToothGrowth$supp == 'VC']
t.test(OJ, VC,
paired = FALSE, var.equal = FALSE, conf.level = 0.95)
t.test(OJ, VC,alternative = "greater",paired = FALSE)
late_shipments <- read_csv("/Telecom_Customer_Churn/telecom_customer_churn.csv")
install.pakkages("tidyverse")
install.packages("tidyverse")
# Read an FST file
customer_churn <- read_csv("/Telecom_Customer_Churn/telecom_customer_churn.csv")
# Read an FST file
customer_churn <- read.csv("/Telecom_Customer_Churn/telecom_customer_churn.csv")
# Read an FST file
customer_churn <- read.csv("Telecom_Customer_Churn/telecom_customer_churn.csv")
# Read an FST file
customer_churn <- read.csv("telecom_customer_churn.csv")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
library(dplyr) # for functions
library(tidyverse)
# Read an FST file
customer_churn <- read.csv("telecom_customer_churn.csv")
# Read an FST file
customer_churn <- read.csv("telecom_customer_churn")
# Read an FST file
customer_churn <- read.csv("C:\Users\sclau\Documents\01-upskill\DataCamp\datacamp-notes\Statistics Fundamentals with R\telecom_customer_churn")
# Read an FST file
customer_churn <- read.csv("\Users\sclau\Documents\01-upskill\DataCamp\datacamp-notes\Statistics Fundamentals with R\telecom_customer_churn")
# Read an FST file
customer_churn <- read.csv("C:/Users/sclau/Documents/01-upskill/DataCamp/datacamp-notes/Statistics Fundamentals with R/telecom_customer_churn.csv")
#Ho: The mean Total Revenue is the same for those that Churned and those that Stayed
#Ha: The mean Total Revenue is greater for those that Stayed and those that Churned
#HO:  MuStayed = MuChurned
#Ha:  MuStayed > MuChurned
install.packages("dplyr")
install.packages("tidyverse")
library(dplyr) # for functions
library(tidyverse)
# Read the customer churn csv file
customer_churn <- read.csv("telecom_customer_churn.csv")
# Install packages
install.packages("dplyr")
install.packages("tidyverse")
install.packages("ggplot2")
library(tidyverse) # for data tidying
sp500 <- read.csv("S&P 500 Stock Prices 2014-2017.csv")
wd <- getwd()
setwd(wd)
# Mean and Median
# Read the S&P 500 csv file
sp500 <- read.csv("S&P 500 Stock Prices 2014-2017.csv")
install.packages("tidyverse")
install.packages("dplyr")
install.packages("ggplot2")
library(tidyverse) # for data tidying
library(dplyr) # for tabular data manipulation
library(ggplot2) # for visualization
wd <- getwd()
setwd(wd)
wd <- getwd()
library(tidyverse) # for data tidying
library(dplyr) # for tabular data manipulation
library(magrittr)
library(ggplot2) # for visualization
library(lubridate) # for handling date fields
library(broom)
# Machine Learning
library(tidymodels)
library(modeltime)
# remotes::install_github("busine")
# Install packages
install.packages("tidyverse")
install.packages("dplyr")
install.packages("magrittr")
install.packages("ggplot2")
install.packages("lubridate")
install.packages("broom")
install.packages("tidymodels")
install.packages("modeltime")
install.packages(c("tidyverse", "dplyr", "magrittr", "ggplot2", "lubridate", "broom", "tidymodels", "modeltime", "modeltime.ensemble", "modeltime.resample", "timetk"))
library(tidyverse)
library(dplyr)
library(magrittr)
library(ggplot2)
library(lubridate)
library(broom)
library(tidymodels)
library(modeltime)
remotes::install_github("business-science/modeltime.gluonts")
remotes::install_github("business-science/modeltime.gluonts")
install.packages("modeltime", dependencies = TRUE)
library(modeltime)
shiny::runApp('shinyApps/hsbc')
# Creating the user interface (UI) for the Shiny app
ui <- fluidPage(
# Displaying the text "Hello, world!!!" in the UI
'Hello, world!!!'
)
# Install packages
install.packages("shiny")
install.packages("ggplot2")
setwd("C:/Users/sclau/Documents/r-stats-programming-workshop/3-r-forecasting-and-business-intelligence/1-shiny-fundamentals/01-get-started-with-shiny")
setwd("C:/Users/sclau/Documents/r-stats-programming-workshop/3-r-forecasting-and-business-intelligence/2-forecasting-in-r-shiny/1-stock-price-forecasting-r-shiny")
# Creating the user interface (UI) for the Shiny app
ui <- fluidPage(
# Displaying the text "Hello, world!!!" in the UI
'Hello, world!!!'
)
library(shiny) # for building the dashboard app
library(ggplot2) # for visualization
# Creating the user interface (UI) for the Shiny app
ui <- fluidPage(
# Displaying the text "Hello, world!!!" in the UI
'Hello, world!!!'
)
# Defining the server function, which handles the server-side computations and interactions
server <- function(input, output, session) {
# The input parameter represents the user input
# The output parameter is used to send output to the UI
# The session parameter represents the current Shiny session
}
# Creating the Shiny app by combining the UI and server functions
shinyApp(ui = ui, server = server)
ui <- fluidPage(
# Displaying a text input field labeled "Enter your name:"
textInput("name", "Enter your name:")
)
# Defining the server function, which handles the server-side computations and interactions
server <- function(input, output) {
# The input parameter represents the user input
# The output parameter is used to send output to the UI
}
# Creating the Shiny app by combining the UI and server functions
shinyApp(ui = ui, server = server)
# Creating the user interface (UI) for the Shiny app
ui <- fluidPage(
# Displaying a text input field labeled "What is your name?"
textInput("name", "What is your name?"),
# Displaying an output area for the greeting
textOutput("greeting")
)
# Defining the server function, which handles the server-side computations and interactions
server <- function(input, output) {
# Rendering the output text based on the input value
output$greeting <- renderText({
# Generating the greeting by concatenating "Hello," with the value of input$name
paste("Hello,", input$name)
})
}
# Creating the Shiny app by combining the UI and server functions
shinyApp(ui = ui, server = server)
characters <- read.csv("Harry_Potter_Movies/Characters.csv", fileEncoding = "UTF-8")
setwd("C:/Users/sclau/Documents/r-stats-programming-workshop/3-r-forecasting-and-business-intelligence/2-forecasting-in-r-shiny/1-stock-price-forecasting-r-shiny")
characters <- read.csv("Harry_Potter_Movies/Characters.csv", fileEncoding = "UTF-8")
getwd
setwd("C:/Users/sclau/Documents/r-stats-programming-workshop/3-r-forecasting-and-business-intelligence/1-shiny-fundamentals")
characters <- read.csv("Harry_Potter_Movies/Characters.csv", fileEncoding = "UTF-8")
# UI
ui <- fluidPage(
# Dropdown to select a house
selectInput("house", "Select House", choices = unique(characters$House))
)
# Server
server <- function(input, output, session) {
}
# Run the Shiny app
shinyApp(ui = ui, server = server)
# UI
ui <- fluidPage(
# Dropdown to select a house
selectInput("house", "Select House", choices = unique(characters$House))
)
# Server
server <- function(input, output, session) {
output$plot <- renderPlot({
# Placeholder for the actual plot generation code
ggplot()
})
}
# Run the Shiny app
shinyApp(ui = ui, server = server)
# UI
ui <- fluidPage(
# Dropdown to select a house
selectInput("house", "Select House", choices = unique(characters$House))
)
# Server
server <- function(input, output, session) {
output$plot <- renderPlot({
# Placeholder for the actual plot generation code
ggplot()
})
}
# Run the Shiny app
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel("Harry Potter Character Explorer"),
sidebarLayout(
sidebarPanel(
# Dropdown to select a house
selectInput("house", "Select House", choices = unique(characters$House))
),
mainPanel(
# Plot output
plotOutput("plot")
)
)
)
# Server
server <- function(input, output, session) {
output$plot <- renderPlot({
# Placeholder for the actual plot generation code
ggplot()
})
}
# Run the Shiny app
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel("Harry Potter Character Explorer"),
sidebarLayout(
sidebarPanel(
# Dropdown to select a house
selectInput("house", "Select House", choices = unique(characters$House))
),
mainPanel(
# Plot output
plotOutput("plot")
)
)
)
# Server
server <- function(input, output, session) {
output$plot <- renderPlot({
# Placeholder for the actual plot generation code
ggplot()
})
}
# Run the Shiny app
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel("Harry Potter Character Explorer"),
sidebarLayout(
sidebarPanel(
# Dropdown to select a house
selectInput("house", "Select House", choices = unique(characters$House))
),
mainPanel(
# Plot output
plotOutput("plot")
)
)
)
# Server
server <- function(input, output, session) {
output$plot <- renderPlot({
# Filtering the data based on the selected house
filtered_data <- subset(characters, House == input$house)
# Generating the bar plot
ggplot(filtered_data) +
geom_bar(aes(x = Gender, fill = House), position = "dodge") +
labs(x = "Gender", y = "Count")  # Update x-axis and y-axis labels as needed
})
output$gender <- renderText({
# Filtering the data based on the selected house
filtered_data <- subset(characters, House == input$house)
# Retrieving unique gender values
unique(filtered_data$Gender)
})
}
# Run the Shiny app
shinyApp(ui = ui, server = server)
# forecast next 10 days price
library(fpp2)
library(dplyr)
library(astsa)
setwd("C:/Users/sclau/Documents/r-stats-programming-workshop/3-r-forecasting-and-business-intelligence/2-forecasting-in-r-shiny/1-stock-price-forecasting-r-shiny")
# plot the trend of HSBC stock
# 1. read the HSBC.csv file into a data frame called `stock`
stock <- read.csv("HSBC.csv")
# 2. print the first few rows of the data frame
head(stock)
# 3. select the "Date" and "Close" columns from the `stock` data frame
stock <- stock[c("Date", "Close")]
View(stock)
# 3. select the "Date" and "Close" columns from the `stock` data frame
stock <- stock[c("Date", "Close")]
# 4. convert the "Date" column to a Date object
stock$Date <- as.Date(stock$Date)
# 5. evaluate the `plot()` function within the context of the `stock` data frame
with(data = stock,
plot(Date, Close, type = "l",
main = "HSBC Stock",
xlab = "12 Months",
ylab = "$ Close"))
# forecast next 10 days price
# 6. fit an ARIMA model to the `Close` column of the `stock` data frame
arima.hsbc <- auto.arima(stock["Close"])
# 7. forecast the next 10 days of prices based on the ARIMA model
forecast(arima.hsbc, h = 10)
# 8. plot the time series of the `Close` column of the `stock` data frame
autoplot(ts(stock["Close"]))
# 6. fit an ARIMA model to the `Close` column of the `stock` data frame
arima.hsbc <- auto.arima(stock["Close"])
# 7. forecast the next 10 days of prices based on the ARIMA model
forecast(arima.hsbc, h = 10)
# 8. plot the time series of the `Close` column of the `stock` data frame
autoplot(ts(stock["Close"]))
forecast(arima.hsbc, h = 10)
# 9. fit a SARIMA model to the `Close` column of the `stock` data frame
sarima(ts(stock["Close"]), 0, 1, 0)
library(dplyr) #for data manipulation
library(astsa) # for forecasting
library(fpp2) # for forecasting viz
# 9. fit a SARIMA model to the `Close` column of the `stock` data frame
sarima(ts(stock["Close"]), 0, 1, 0)
# 10. forecast the next 10 days of prices based on the SARIMA model
sarima.for(ts(stock["Close"]), 10, 0, 1, 0)
# 11. print the length of the `Close` column of the `stock` data frame
length(stock["Close"])
# 13. print the dimensions of the `stock` data frame
dim(stock)[1]
wd <- getwd()
setwd("C:/Users/sclau/Documents/r-stats-programming-workshop/3-r-forecasting-and-business-intelligence/2-forecasting-in-r-shiny/1-stock-price-forecasting-r-shiny")
# plot the trend of HSBC stock
# 1. read the HSBC.csv file into a data frame called `stock`
stock <- read.csv("HSBC.csv")
# 3. select the "Date" and "Close" columns from the `stock` data frame
stock <- stock[c("Date", "Close")]
View(stock)
# 4. convert the "Date" column to a Date object
stock$Date <- as.Date(stock$Date)
# 5. evaluate the `plot()` function within the context of the `stock` data frame
with(data = stock,
plot(Date, Close, type = "l",
main = "HSBC Stock",
xlab = "12 Months",
ylab = "$ Close"))
# 6. fit an ARIMA model to the `Close` column of the `stock` data frame
arima.hsbc <- auto.arima(stock["Close"])
View(arima.hsbc)
# 8. plot the time series of the `Close` column of the `stock` data frame
autoplot(ts(stock["Close"]))
# 9. fit a SARIMA model to the `Close` column of the `stock` data frame
sarima(ts(stock["Close"]), 0, 1, 0)
# 9. fit a SARIMA model to the `Close` column of the `stock` data frame
sarima(ts(stock["Close"]), 0, 1, 0)
# 10. forecast the next 10 days of prices based on the SARIMA model
sarima.for(ts(stock["Close"]), 10, 0, 1, 0)
# 11. print the length of the `Close` column of the `stock` data frame
length(stock["Close"])
# 13. print the dimensions of the `stock` data frame
dim(stock)[1]
runApp()
runApp()
install.packages("shinythemes")
library(shinythemes, lib.loc = "C:/Program Files/R/R-4.3.0/library")
shiny::runApp()
runApp()
