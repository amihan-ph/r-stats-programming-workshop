View(pizza_type_r)
pizza_type_count_r <- pizza %>%
# Count the pizza_type_id
count(pizza_type_id) %>%
# Right join pizza_type
right_join(pizza_type, by = "pizza_type_id") %>%
# Filter for NA
filter(is.na(n))
head(pizza_type_count_r)
replace_na <- function(data, replacements) {
for (column in names(replacements)) {
data <- data %>% mutate(!!sym(column) := ifelse(is.na(!!sym(column)), replacements[[column]], !!sym(column)))
}
return(data)
}
pizza_type_count_r_replaced_na <- pizza %>%
# Count the pizza_type_id
count(pizza_type_id) %>%
# Right join pizza_type
right_join(pizza_type, by = "pizza_type_id") %>%
# Use replace_na to replace missing values in the n column
replace_na(list(n = 0))
head(pizza_type_count_r_replaced_na)
# How much is each type of pizza?
pizza_r_total_sales_by_pizza_replaced <- pizza_type_count_r_replaced_na %>%
group_by(name) %>%
mutate(quantity = as.numeric(quantity),
total_pizza_sales = price * quantity) %>%
summarize(total_pizza_sales = sum(total_pizza_sales))
pizza_type_r <- pizza %>%
# Right join pizza_type
right_join(pizza_type, by = "pizza_type_id")
View(pizza_type_r)
pizza_type_count_r <- pizza %>%
# Count the pizza_type_id
count(pizza_type_id) %>%
# Right join pizza_type
right_join(pizza_type, by = "pizza_type_id") %>%
# Filter for NA
filter(is.na(n))
View(pizza_type_count_r)
# Create a replace_na function that takes in the data and the value for replacing the na
replace_na <- function(data, replacements) {
for (column in names(replacements)) {
data <- data %>% mutate(!!sym(column) := ifelse(is.na(!!sym(column)), replacements[[column]], !!sym(column)))
}
return(data)
}
pizza_type_count_r_replaced_na <- pizza %>%
# Count the pizza_type_id
count(pizza_type_id) %>%
# Right join pizza_type
right_join(pizza_type, by = "pizza_type_id") %>%
# Use replace_na to replace missing values in the n column
replace_na(list(n = 0))
head(pizza_type_count_r_replaced_na)
View(pizza_type_count_r_replaced_na)
# How much is each type of pizza?
pizza_r_total_sales_by_pizza_replaced <- order_and_details_r %>%
right_join(pizza_type_count_r_replaced_na, 'pizza_id')
pizza_typet_r_replaced_na <- pizza %>%
# Count the pizza_type_id
# count(pizza_type_id) %>%
# Right join pizza_type
right_join(pizza_type, by = "pizza_type_id") %>%
# Use replace_na to replace missing values in the n column
replace_na(list(n = 0))
# Perform a right join
pizza_type_r <- pizza %>%
# Right join pizza_type
right_join(pizza_type, by = "pizza_type_id")
View(pizza_type_r)
pizza_type_count_r <- pizza %>%
# Count the pizza_type_id
count(pizza_type_id) %>%
# Right join pizza_type
right_join(pizza_type, by = "pizza_type_id") %>%
# Filter for NA
filter(is.na(n))
View(pizza_type_count_r)
# Create a replace_na function that takes in the data and the value for replacing the na
replace_na <- function(data, replacements) {
for (column in names(replacements)) {
data <- data %>% mutate(!!sym(column) := ifelse(is.na(!!sym(column)), replacements[[column]], !!sym(column)))
}
return(data)
}
pizza_typet_r_replaced_na <- pizza %>%
# Count the pizza_type_id
count(pizza_type_id) %>%
# Right join pizza_type
right_join(pizza_type, by = "pizza_type_id") %>%
# Use replace_na to replace missing values in the n column
replace_na(list(n = 0))
View(pizza_type_r_replaced_na)
pizza_typet_r_replaced_na <- pizza_type_count_r %>%
# Count the pizza_type_id
count(pizza_type_id) %>%
# Right join pizza_type
right_join(pizza_type, by = "pizza_type_id") %>%
# Use replace_na to replace missing values in the n column
replace_na(list(n = 0))
View(pizza_type_r_replaced_na)
pizza_type_r_replaced_na <- pizza_type_count_r %>%
# Count the pizza_type_id
count(pizza_type_id) %>%
# Right join pizza_type
right_join(pizza_type, by = "pizza_type_id") %>%
# Use replace_na to replace missing values in the n column
replace_na(list(n = 0))
View(pizza_type_r_replaced_na)
# Read the order. order_detail, pizza, and pizza_detail csv files
order <- read.csv("Pizza+Place+Sales/pizza_sales/orders.csv")
order_detail <- read.csv("Pizza+Place+Sales/pizza_sales/order_details.csv")
pizza <- read.csv("Pizza+Place+Sales/pizza_sales/pizzas.csv")
pizza_type <- read.csv("Pizza+Place+Sales/pizza_sales/pizza_types.csv")
# Perform a right join
pizza_type_r <- pizza %>%
# Right join pizza_type
right_join(pizza_type, by = "pizza_type_id")
View(pizza_type_r)
pizza_type_count_r <- pizza %>%
# Count the pizza_type_id
count(pizza_type_id) %>%
# Right join pizza_type
right_join(pizza_type, by = "pizza_type_id") %>%
# Filter for NA
filter(is.na(n))
View(pizza_type_count_r)
# Create a replace_na function that takes in the data and the value for replacing the na
replace_na <- function(data, replacements) {
for (column in names(replacements)) {
data <- data %>% mutate(!!sym(column) := ifelse(is.na(!!sym(column)), replacements[[column]], !!sym(column)))
}
return(data)
}
pizza_type_r_replaced_na <- pizza_type_count_r %>%
# Count the pizza_type_id
count(pizza_type_id) %>%
# Right join pizza_type
right_join(pizza_type, by = "pizza_type_id") %>%
# Use replace_na to replace missing values in the n column
replace_na(list(n = 0))
View(pizza_type_r_replaced_na)
View(pizza_type_r_replaced_na)
# Perform a right join
pizza_type_r <- pizza %>%
# Right join pizza_type
right_join(pizza_type, by = "pizza_type_id")
print(pizza_type_r)
pizza_type_count_r <- pizza %>%
# Count the pizza_type_id
count(pizza_type_id) %>%
# Right join pizza_type
right_join(pizza_type, by = "pizza_type_id") %>%
# Filter for NA
filter(is.na(n))
print(pizza_type_count_r)
# Create a replace_na function that takes in the data and the value for replacing the na
replace_na <- function(data, replacements) {
for (column in names(replacements)) {
data <- data %>% mutate(!!sym(column) := ifelse(is.na(!!sym(column)), replacements[[column]], !!sym(column)))
}
return(data)
}
pizza_type_count_r_replaced_na <- pizza %>%
# Count the pizza_type_id
count(pizza_type_id) %>%
# Right join pizza_type
right_join(pizza_type, by = "pizza_type_id") %>%
# Use replace_na to replace missing values in the n column
replace_na(list(n = 0))
print(pizza_type_count_r_replaced_na)
View(pizza_type_count_r_replaced_na)
order <- read.csv("Pizza+Place+Sales/pizza_sales/orders.csv")
order_detail <- read.csv("Pizza+Place+Sales/pizza_sales/order_details.csv")
pizza <- read.csv("Pizza+Place+Sales/pizza_sales/pizzas.csv")
pizza_type <- read.csv("Pizza+Place+Sales/pizza_sales/pizza_types.csv")
order_and_details <- order %>%
inner_join(order_detail, by ='order_id')
View(order_and_details)
order_and_details_l <- order %>%
left_join(order_detail, by = ('order_id'))
View(order_and_details_l)
# Notice how order_and_details_
order %>%
left_join(order_detail, by ="order_id", relationship = "many-to-many") %>%
# Filter for where quantity is na to show the sample that cannot be matched
filter(is.na(quantity))
order_and_details_l_date_count <- order_and_details_l %>%
group_by(date) %>%
summarize(count = n())
head(order_and_details_l_date_count)
# COMPARE WITH INNER JOIN
order_and_details_date_count <- order_and_details %>%
group_by(date) %>%
summarize(count = n())
head(order_and_details_date_count)
pizza_l_total_sales_by_pizza <- order_and_details_l %>%
left_join(pizza, by = 'pizza_id') %>%
left_join(pizza_type, by = 'pizza_type_id') %>%
group_by(name) %>%
mutate(quantity = as.numeric(quantity),
total_pizza_sales = price * quantity) %>%
summarize(total_pizza_sales = sum(total_pizza_sales))
head(pizza_l_total_sales_by_pizza)
# COMPARE WITH INNER JOIN
pizza_total_sales_by_pizza <- order_and_details %>%
inner_join(pizza, by = 'pizza_id') %>%
inner_join(pizza_type, by = 'pizza_type_id') %>%
group_by(name) %>%
mutate(quantity = as.numeric(quantity),
total_pizza_sales = price * quantity) %>%
summarize(total_pizza_sales = sum(total_pizza_sales))
head(pizza_total_sales_by_pizza)
# Add the verb, table, and right joining the tables
order_and_details_r <- order %>%
right_join(order_detail, by = c('order_id' = 'order_id'))
View(order_and_details_r)
# How many orders made for each date?
order_and_details_r_date_count <- order_and_details_r %>%
group_by(date) %>%
summarize(count = n())
head(order_and_details_r_date_count)
# How much is each type of pizza?
pizza_r_total_sales_by_pizza <- order_and_details_r %>%
right_join(pizza, by = 'pizza_id') %>%
right_join(pizza_type, by = 'pizza_type_id') %>%
group_by(name) %>%
mutate(quantity = as.numeric(quantity),
total_pizza_sales = price * quantity) %>%
summarize(total_pizza_sales = sum(total_pizza_sales))
head(pizza_r_total_sales_by_pizza)
View(pizza_r_total_sales_by_pizza)
order_and_details_pizza_r <- order_and_details_r %>%
right_join(pizza, by = 'pizza_id')
View(order_and_details_pizza_r)
order_and_details_pizza_type_r <- order_and_details_pizza_r %>%
right_join(pizza_type, by = 'pizza_type_id')
View(order_and_details_pizza_type_r)
# Look at null order_id and order_details_id since this column for joining
filtered_r_na <- order_and_details_pizza_type_r %>%
filter(is.na(order_id), is.na(order_details_id))
View(filtered_r_na)
# Perform a right join
pizza_type_r <- pizza %>%
# Right join pizza_type
right_join(pizza_type, by = "pizza_type_id")
print(pizza_type_r)
pizza_type_count_r <- pizza %>%
# Count the pizza_type_id
count(pizza_type_id) %>%
# Right join pizza_type
right_join(pizza_type, by = "pizza_type_id") %>%
# Filter for NA
filter(is.na(n))
View(pizza_type_count_r)
# Create a replace_na function that takes in the data and the value for replacing the na
replace_na <- function(data, replacements) {
for (column in names(replacements)) {
data <- data %>% mutate(!!sym(column) := ifelse(is.na(!!sym(column)), replacements[[column]], !!sym(column)))
}
return(data)
}
pizza_type_count_r_replaced_na <- pizza %>%
# Count the pizza_type_id
count(pizza_type_id) %>%
# Right join pizza_type
right_join(pizza_type, by = "pizza_type_id") %>%
# Use replace_na to replace missing values in the n column
replace_na(list(n = 0))
View(pizza_type_count_r_replaced_na)
# Install packages
install.packages("shiny")
install.packages("ggplot2")
library(shiny)
library(ggplot2) # for visualization
wd <- getwd()
setwd("C:/Users/sclau/Documents/r-stats-programming-workshop/3-r-forcasting-and-business-intelligence/2-shiny-fundamentals/1-shiny-building-web-applications/01-get-started-with-shiny")
library(shiny) # for building the dashboard app
library(ggplot2) # for visualization
wd <- getwd()
setwd("C:/Users/sclau/Documents/r-stats-programming-workshop/3-r-forcasting-and-business-intelligence/2-shiny-fundamentals/1-shiny-building-web-applications/01-get-started-with-shiny")
wd <- getwd()
setwd("C:/Users/sclau/Documents/r-stats-programming-workshop/3-r-forecasting-and-business-intelligence/1-shiny-fundamentals/1-shiny-building-web-applications/01-get-started-with-shiny")
ui <- fluidPage(
'Hello, world!!!' # Displaying the text "Hello, world!!!" in the UI
)
# Creating the user interface (UI) for the Shiny app
ui <- fluidPage(
'Hello, world!!!' # Displaying the text "Hello, world!!!" in the UI
)
# Defining the server function, which handles the server-side computations and interactions
server <- function(input, output, session) {
# The input parameter represents the user input
# The output parameter is used to send output to the UI
# The session parameter represents the current Shiny session
}
# Creating the Shiny app by combining the UI and server functions
shinyApp(ui = ui, server = server)
# Creating the user interface (UI) for the Shiny app
ui <- fluidPage(
# Displaying a text input field labeled "Enter your name:"
textInput("name", "Enter your name:")
)
# Defining the server function, which handles the server-side computations and interactions
server <- function(input, output) {
# The input parameter represents the user input
# The output parameter is used to send output to the UI
}
# Creating the Shiny app by combining the UI and server functions
shinyApp(ui = ui, server = server)
# Creating the user interface (UI) for the Shiny app
ui <- fluidPage(
textInput("name", "What is your name?"),  # Displaying a text input field labeled "What is your name?"
textOutput("greeting")  # Displaying an output area for the greeting
)
# Defining the server function, which handles the server-side computations and interactions
server <- function(input, output) {
output$greeting <- renderText({  # Rendering the output text based on the input value
paste("Hello,", input$name)  # Generating the greeting by concatenating "Hello," with the value of input$name
})
}
# Creating the Shiny app by combining the UI and server functions
shinyApp(ui = ui, server = server)
characters <- read.csv("Harry_Potter_Movies/Characters.csv", fileEncoding = "UTF-8")
# UI
ui <- fluidPage(
selectInput("house", "Select House", choices = unique(characters$House))  # Dropdown to select a house
)
# Server
server <- function(input, output, session) {
}
# Run the Shiny app
shinyApp(ui = ui, server = server)
# UI
ui <- fluidPage(
selectInput("house", "Select House", choices = unique(characters$House))  # Dropdown to select a house
)
# Server
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot()  # Placeholder for the actual plot generation code
})
}
# Run the Shiny app
shinyApp(ui = ui, server = server)
# UI
ui <- fluidPage(
titlePanel("Harry Potter Character Explorer"),
sidebarLayout(
sidebarPanel(
selectInput("house", "Select House", choices = unique(characters$House)),  # Dropdown to select a house
),
mainPanel(plotOutput("plot"))
)
)
# Server
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot()  # Placeholder for the actual plot generation code
})
}
# Run the Shiny app
shinyApp(ui = ui, server = server)
# UI
ui <- fluidPage(
titlePanel("Harry Potter Character Explorer"),
sidebarLayout(
sidebarPanel(
selectInput("house", "Select House", choices = unique(characters$House)),  # Dropdown to select a house
),
mainPanel(plotOutput("plot"))
)
)
# Server
server <- function(input, output, session) {
output$plot <- renderPlot({
filtered_data <- subset(characters, House == input$house)
ggplot(filtered_data) +
geom_bar(aes(x = Gender, fill = House), position = "dodge") +
labs(x = "Gender", y = "Count")  # Update x-axis and y-axis labels as needed
})
output$gender <- renderText({
filtered_data <- subset(characters, House == input$house)
unique(filtered_data$Gender)
})
}
# Run the Shiny app
shinyApp(ui = ui, server = server)
ui <- fluidPage(
# Displaying the text "Hello, world!!!" in the UI
'Hello, world!!!'
)
# Defining the server function, which handles the server-side computations and interactions
server <- function(input, output, session) {
# The input parameter represents the user input
# The output parameter is used to send output to the UI
# The session parameter represents the current Shiny session
}
# Creating the Shiny app by combining the UI and server functions
shinyApp(ui = ui, server = server)
# Creating the user interface (UI) for the Shiny app
ui <- fluidPage(
# Displaying a text input field labeled "Enter your name:"
textInput("name", "Enter your name:")
)
# Defining the server function, which handles the server-side computations and interactions
server <- function(input, output) {
# The input parameter represents the user input
# The output parameter is used to send output to the UI
}
# Creating the Shiny app by combining the UI and server functions
shinyApp(ui = ui, server = server)
ui <- fluidPage(
# Displaying a text input field labeled "What is your name?"
textInput("name", "What is your name?"),
# Displaying an output area for the greeting
textOutput("greeting")
)
# Defining the server function, which handles the server-side computations and interactions
server <- function(input, output) {
# Rendering the output text based on the input value
output$greeting <- renderText({
# Generating the greeting by concatenating "Hello," with the value of input$name
paste("Hello,", input$name)
})
}
# Creating the Shiny app by combining the UI and server functions
shinyApp(ui = ui, server = server)
characters <- read.csv("Harry_Potter_Movies/Characters.csv", fileEncoding = "UTF-8")
# UI
ui <- fluidPage(
# Dropdown to select a house
selectInput("house", "Select House", choices = unique(characters$House))
)
# Server
server <- function(input, output, session) {
}
# Run the Shiny app
shinyApp(ui = ui, server = server)
# UI
ui <- fluidPage(
# Dropdown to select a house
selectInput("house", "Select House", choices = unique(characters$House))
)
# Server
server <- function(input, output, session) {
output$plot <- renderPlot({
# Placeholder for the actual plot generation code
ggplot()
})
}
# Run the Shiny app
shinyApp(ui = ui, server = server)
# UI
ui <- fluidPage(
titlePanel("Harry Potter Character Explorer"),
sidebarLayout(
sidebarPanel(
# Dropdown to select a house
selectInput("house", "Select House", choices = unique(characters$House))
),
mainPanel(
# Plot output
plotOutput("plot")
)
)
)
# Server
server <- function(input, output, session) {
output$plot <- renderPlot({
# Placeholder for the actual plot generation code
ggplot()
})
}
# Run the Shiny app
shinyApp(ui = ui, server = server)
# UI
ui <- fluidPage(
titlePanel("Harry Potter Character Explorer"),
sidebarLayout(
sidebarPanel(
# Dropdown to select a house
selectInput("house", "Select House", choices = unique(characters$House))
),
mainPanel(
# Plot output
plotOutput("plot")
)
)
)
# Server
server <- function(input, output, session) {
output$plot <- renderPlot({
# Filtering the data based on the selected house
filtered_data <- subset(characters, House == input$house)
# Generating the bar plot
ggplot(filtered_data) +
geom_bar(aes(x = Gender, fill = House), position = "dodge") +
labs(x = "Gender", y = "Count")  # Update x-axis and y-axis labels as needed
})
output$gender <- renderText({
# Filtering the data based on the selected house
filtered_data <- subset(characters, House == input$house)
# Retrieving unique gender values
unique(filtered_data$Gender)
})
}
# Run the Shiny app
shinyApp(ui = ui, server = server)
runApp('~/r-stats-programming-workshop/3-r-forecasting-and-business-intelligence/2-forecasting-in-r-shiny/stock-price-forecasting-r-shiny')
