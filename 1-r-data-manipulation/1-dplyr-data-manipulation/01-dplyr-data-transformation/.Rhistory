install.packages("dplyr")
install.packages("fst")
# Read an FST file
late_shipments <- read_fst("late_shipments.fst")
library(dplyr) # for functions
library(fst)
# Read an FST file
late_shipments <- read_fst("late_shipments.fst")
# Read an FST file
late_shipments <- read_fst("/Users/sclau/Documents/01-upskill/DataCamp/datacamp-notes/Statistics Fundamentals with R.fst")
OJ = ToothGrowth$len[ToothGrowth$supp == 'OJ']
VC = ToothGrowth$len[ToothGrowth$supp == 'VC']
t.test(OJ, VC,
paired = FALSE, var.equal = FALSE, conf.level = 0.95)
t.test(OJ, VC,alternative = "greater",paired = FALSE)
late_shipments <- read_csv("/Telecom_Customer_Churn/telecom_customer_churn.csv")
install.pakkages("tidyverse")
install.packages("tidyverse")
# Read an FST file
customer_churn <- read_csv("/Telecom_Customer_Churn/telecom_customer_churn.csv")
# Read an FST file
customer_churn <- read.csv("/Telecom_Customer_Churn/telecom_customer_churn.csv")
# Read an FST file
customer_churn <- read.csv("Telecom_Customer_Churn/telecom_customer_churn.csv")
# Read an FST file
customer_churn <- read.csv("telecom_customer_churn.csv")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
library(dplyr) # for functions
library(tidyverse)
# Read an FST file
customer_churn <- read.csv("telecom_customer_churn.csv")
# Read an FST file
customer_churn <- read.csv("telecom_customer_churn")
# Read an FST file
customer_churn <- read.csv("C:\Users\sclau\Documents\01-upskill\DataCamp\datacamp-notes\Statistics Fundamentals with R\telecom_customer_churn")
# Read an FST file
customer_churn <- read.csv("\Users\sclau\Documents\01-upskill\DataCamp\datacamp-notes\Statistics Fundamentals with R\telecom_customer_churn")
# Read an FST file
customer_churn <- read.csv("C:/Users/sclau/Documents/01-upskill/DataCamp/datacamp-notes/Statistics Fundamentals with R/telecom_customer_churn.csv")
#Ho: The mean Total Revenue is the same for those that Churned and those that Stayed
#Ha: The mean Total Revenue is greater for those that Stayed and those that Churned
#HO:  MuStayed = MuChurned
#Ha:  MuStayed > MuChurned
install.packages("dplyr")
install.packages("tidyverse")
library(dplyr) # for functions
library(tidyverse)
# Read the customer churn csv file
customer_churn <- read.csv("telecom_customer_churn.csv")
# Install packages
install.packages("dplyr")
install.packages("tidyverse")
install.packages("ggplot2")
library(tidyverse) # for data tidying
sp500 <- read.csv("S&P 500 Stock Prices 2014-2017.csv")
wd <- getwd()
setwd(wd)
# Mean and Median
# Read the S&P 500 csv file
sp500 <- read.csv("S&P 500 Stock Prices 2014-2017.csv")
install.packages("tidyverse")
install.packages("dplyr")
install.packages("ggplot2")
library(tidyverse) # for data tidying
library(dplyr) # for tabular data manipulation
library(ggplot2) # for visualization
wd <- getwd()
setwd(wd)
wd <- getwd()
library(tidyverse) # for data tidying
library(dplyr) # for tabular data manipulation
library(magrittr)
library(ggplot2) # for visualization
library(lubridate) # for handling date fields
library(broom)
# Machine Learning
library(tidymodels)
library(modeltime)
# remotes::install_github("busine")
# Install packages
install.packages("tidyverse")
install.packages("dplyr")
install.packages("magrittr")
install.packages("ggplot2")
install.packages("lubridate")
install.packages("broom")
install.packages("tidymodels")
install.packages("modeltime")
install.packages(c("tidyverse", "dplyr", "magrittr", "ggplot2", "lubridate", "broom", "tidymodels", "modeltime", "modeltime.ensemble", "modeltime.resample", "timetk"))
library(tidyverse)
library(dplyr)
library(magrittr)
library(ggplot2)
library(lubridate)
library(broom)
library(tidymodels)
library(modeltime)
remotes::install_github("business-science/modeltime.gluonts")
remotes::install_github("business-science/modeltime.gluonts")
install.packages("modeltime", dependencies = TRUE)
library(modeltime)
shiny::runApp('shinyApps/hsbc')
wd <- getwd()
setwd("C:/Users/sclau/Documents/r-stats-programming-workshop/3-r-forcasting-and-business-intelligence/")
# install.packages(c("tidyverse", "dplyr", "magrittr", "ggplot2", "lubriorderDate", "broom", "tidymodels", "modeltime", "modeltime.ensemble", "modeltime.resample", "timetk"))
library(tidyverse)
library(dplyr)
library(magrittr)
library(ggplot2)
library(lubridate)
library(broom)
library(tidymodels)
library(timetk)
library(modeltime)
library(modeltime.ensemble)
library(modeltime.resample)
wd <- getwd()
setwd("C:/Users/sclau/Documents/R Shiny Workshop Scratch/")
northwind_traders_orders <- read.csv("Northwind+Traders/Northwind Traders/orders.csv")
northwind_traders_order_details <- read.csv("Northwind+Traders/Northwind Traders/order_details.csv")
glimpse(northwind_traders_orders)
glimpse(northwind_traders_order_details)
dim(northwind_traders_orders)
dim(northwind_traders_order_details)
northwind_traders <- northwind_traders_orders %>%
left_join(northwind_traders_order_details, by = c('orderID'))
glimpse(northwind_traders)
head(northwind_traders)
dim(northwind_traders)
northwind_traders <- northwind_traders %>%
mutate(total_order_sales = unitPrice * quantity)
northwind_traders <- northwind_traders %>%
mutate(
orderDate = ymd(orderDate)
)
northwind_traders %>%
# group_by(orderID) %>%
plot_time_series(orderDate, total_order_sales,
.smooth = FALSE,
.facet_ncol = 3,
.interactive = FALSE
)
library(dplyr) # for tabular data manipulation
setwd("C:/Users/sclau/Documents/r-stats-programming-workshop/1-r-data-manipulation/1-dplyr-data-manipulation/01-dplyr-data-transformation")
# Take a look at the dataset
head(space_mission)
# Read the space mission csv file
space_mission <- read.csv("Space+Missions/space_missions.csv")
View(space_mission)
# Take a look at the dataset
head(space_mission)
# Other way of taking a look at the dataset
view(space_mission)
# Take a glimpse of the data type
glimpse(space_mission)
# Convert "Price" column from character to numeric in the data frame or tibble.
space_mission <- space_mission %>% # called the pipe operator in R. It is a special operator that allows you to chain together functions. This can be very useful for data manipulation, as it allows you to write code that is more concise and readable.
# mutate is used for creating or changing a column in R
mutate(Price = as.numeric(Price)) # The as.numeric() function in R is used to convert a vector of characters or factors to a vector of numeric values
# Check the class or data type  of the converted column
class(space_mission$Price)
# Further verify by using the glimpse function
glimpse(space_mission)
space_mission %>%
# Select the columns by using the select function
select(Date, Rocket, Mission, MissionStatus, Price) # These 4 columns were selected as compared to all the columns you have seen using the glimpse function
# Can you save the tibble with the selected columns as space_mission selected?
space_mission_selected <- space_mission %>%
select(Date, Rocket, Mission, MissionStatus, Price)
View(space_mission_selected)
# What were the most expensive missions?
space_mission_selected %>%
# Add a verb to sort in descending order of price
arrange(desc(Price))
# What were the missions that spend more than $120M on rockets?
space_mission_selected %>%
# Add the verb filter to obtain the samples with rockets amounting above $120M
filter(Price > 120)
# What were the four missions that failed despite spending more than $120M on rockets?
space_mission_selected %>%
# Having more than one condition for filtering can be done by seperating them via a comma
# Filter for rockets with a price above $120M, but the mission was a Failure
filter(Price > 120, MissionStatus=="Failure")
# What were the four missions that failed despite spending more than $120M on rockets?
space_mission_selected %>%
# Having more than one condition for filtering can be done by seperating them via a comma
# Filter for rockets with a price above $120M, but the mission was a Failure
filter(Price > 120 | MissionStatus=="Failure")
space_mission_selected_120_OR <- space_mission_selected %>%
# Having more than one condition for filtering can be done by seperating them via a comma
# Filter for rockets with a price above $120M, but the mission was a Failure
filter(Price > 120 | MissionStatus=="Failure")
View(space_mission_selected_120_OR)
View(space_mission_selected_120_OR)
space_mission_selected %>%
# Filter for Successful missions spending only less than $80M on rockets
filter(MissionStatus == "Success", Price < 80) %>%
# Sort in descending order of Price
arrange(Price)
space_mission_selected %>%
# Filter for Successful missions spending only less than $80M on rockets
filter(MissionStatus == "Success", Price < 80) %>%
# Sort in descending order of Price
arrange(Price)
# Convert 'date' column to Date format
space_mission_selected <- space_mission_selected %>%
# Add the verb mutate to create a column Date from the original Date column to a have its
# classs converted to a date format following: MM-DD-YYYY
mutate(Date = as.Date(Date),
Date = format(Date, "%m-%d-%Y"))
print(space_mission_selected)
library(lubridate) # Usually this should be added on the top of the R source file
space_mission_2000 <- space_mission_selected %>%
filter(year(Date) == 2000)
space_mission_2000 <- space_mission_selected %>%
filter(year(Date) == 2000) # year function is from lubridate not dplyr
# Lubridate is an R package that provides a comprehensive and user-friendly way to work with dates and times in R.
library(lubridate)
space_mission_2000 <- space_mission_selected %>%
filter(year(Date) == 2000) # year function is from lubridate not dplyr
glimpse(space_mission_selected)
# Lubridate is an R package that provides a comprehensive and user-friendly way to work with dates and times in R.
library(lubridate)
space_mission_selected <- space_mission_selected %>%
mutate(Date = ymd(Date))
space_mission_selected <- space_mission_selected %>%
mutate(Date = ymd(Date)) # ymd function is from lubridate not dplyr
space_mission_2000 <- space_mission_selected %>%
filter(year(Date) == 2000) # year function is from lubridate not dplyr
print(space_mission_2000)
View(space_mission_selected)
space_mission <- read.csv("Space+Missions/space_missions.csv")
# SELECT COLUMNS
# Not all fields in a given table are needed in the analysis.
# To prepare the data, you can simply SELECT the columns that you need based on your use cases.
# Take a look at the dataset
head(space_mission)
# Other way of taking a look at the dataset
view(space_mission)
# Determine the dimension of the dataset
dim(space_mission)
# Take a glimpse of the data type
glimpse(space_mission)
# A tibble is a modern data frame in R that is designed to be easy to read, print, and manipulate.
#
# Tibbles are a subclass of data frames, so they inherit all of the functionality of data frames.
# Tibbles have a few additional features that make them more useful for data analysis, such as:
# They do not automatically convert strings to factors.
# They print out in a human-readable format.
# They are consistent with the tidyverse philosophy of data wrangling.
# Tibbles are available in the dplyr and tibble packages.
# Convert "Price" column from character to numeric in the data frame or tibble.
space_mission <- space_mission %>% # called the pipe operator in R. It is a special operator that allows you to chain together functions. This can be very useful for data manipulation, as it allows you to write code that is more concise and readable.
# mutate is used for creating or changing a column in R
mutate(Price = as.numeric(Price)) # The as.numeric() function in R is used to convert a vector of characters or factors to a vector of numeric values
# Check the class or data type  of the converted column
class(space_mission$Price)
# Further verify by using the glimpse function
glimpse(space_mission)
# dbl refers to a double data type. A double is a double-precision floating point number,
# which means that it can represent a wide range of values with a high degree of accuracy
space_mission %>%
# Add the verb select to select the columns: Date, Rocket, Mission, MissionStatus, Price
select(Date, Rocket, Mission, MissionStatus, Price) # These 4 columns were selected as compared to all the columns you have seen using the glimpse function
# Can you save the tibble with the selected columns as space_mission selected?
space_mission_selected <- space_mission %>%
select(Date, Rocket, Mission, MissionStatus, Price)
# FILTER and ARRANGE
# Filter allows you to select a subset of data that meets specific criteria or conditions
# Arrange allows you to organize it in a specific order, making it easier to analyze, visualize,
# or present the information effectively
# What were the missions with the most expensive rockets?
space_mission_selected %>%
# Add the verb arrange to order the price column in descending order
arrange(desc(Price))
# What were the missions that spend more than $120M on rockets?
space_mission_selected %>%
# Add the verb filter to obtain the samples with rockets amounting above $120M
filter(Price > 120)
# What were the four missions that failed despite spending more than $120M on rockets?
space_mission_selected %>%
# Having more than one condition for filtering can be done by separating them via a comma
# Comma represents an AND. If you want to do an OR, use | (or operator)
# Filter for rockets with a price above $120M, but the mission was a Failure
filter(Price > 120, MissionStatus=="Failure")
# What were the successful missions that only spend less than $80M on rockets?
# And What were the successful missions that had the cheapest rockets?
space_mission_selected %>%
# Filter for Successful missions spending only less than $80M on rockets
filter(MissionStatus == "Success", Price < 80) %>%
# Sort in descending order of Price
arrange(Price)
# Convert 'date' column to Date format
space_mission_selected <- space_mission_selected %>%
# Add the verb mutate to create a column Date from the original Date column follow: MM-DD-YYYY
mutate(Date = as.Date(Date),
Date = format(Date, "%m-%d-%Y"))
glimpse(space_mission_selected)
# Another way of taking a look at the dataset
print(space_mission_selected)
space_mission_date_formatted <- space_mission_selected %>%
mutate(Date = ymd(Date)) # ymd function is from lubridate not dplyr
head(space_mission_date_formatted)
space_mission_2000 <- space_mission_date_formatted %>%
filter(year(Date) == 2000) # year function is from lubridate not dplyr
head(space_mission_2000)
space_mission_2000 <- space_mission_selected %>%
filter(year(Date) == 2000) # year function is from lubridate not dplyr
# Can you save the tibble with the selected columns as space_mission selected?
space_mission_selected <- space_mission %>%
select(Date, Rocket, Mission, MissionStatus, Price)
# Convert 'date' column to Date format
space_mission_date_formatted <- space_mission_selected %>%
# Add the verb mutate to create a column Date from the original Date column follow: MM-DD-YYYY
mutate(Date = as.Date(Date),
Date = strptime(Date, "%m-%d-%Y"))
# Another way of taking a look at the dataset
print(space_mission_date_formatted)
# Convert 'date' column to Date format
space_mission_date_formatted <- space_mission_selected %>%
# Add the verb mutate to create a column Date from the original Date column follow: MM-DD-YYYY
mutate(Date = strptime(Date, "%m-%d-%Y"))
glimpse(space_mission_date_formatted)
# Convert 'date' column to Date format
space_mission_date_formatted <- space_mission_selected %>%
# Add the verb mutate to create a column Date from the original Date column follow: MM-DD-YYYY
mutate(Date = as.Date(Date, "%m-%d-%Y"))
glimpse(space_mission_date_formatted)
# What were the successful missions that only spend less than $80M on rockets?
# And What were the successful missions that had the cheapest rockets?
space_mission_selected %>%
# Filter for Successful missions spending only less than $80M on rockets
filter(MissionStatus == "Success", Price < 80) %>%
# Sort in descending order of Price
arrange(Price)
space_mission_selected %>%
# Add the verb mutate to create a column Date from the original Date column follow: MM-DD-YYYY
mutate(Date = as.Date(Date, "%m-%d-%Y"))
# Further verify by using the glimpse function
glimpse(space_mission)
glimpse(space_mission_selected)
# Convert 'date' column to Date format
space_mission_date_formatted <- space_mission_selected %>%
# Add the verb mutate to create a column Date from the original Date column follow: MM-DD-YYYY
mutate(Date = as.Date(Date, format = "%m-%d-%Y")) %>%
mutate(Date = format(Date, format = "%m%d%Y"))
glimpse(space_mission_date_formatted)
space_mission_date_formatted <- space_mission_selected %>%
# Add the verb mutate to create a column Date from the original Date column follow: MM-DD-YYYY
mutate(Date = as.Date(Date, format = "%m-%d-%Y"))
glimpse(space_mission_date_formatted)
space_mission_date_formatted <- space_mission_selected %>%
# Add the verb mutate to create a column Date from the original Date column follow: MM-DD-YYYY
mutate(Date = as.Date(Date))
glimpse(space_mission_date_formatted)
# Convert 'date' column to Date format
space_mission_date_formatted <- space_mission_selected %>%
# Add the verb mutate to create a column Date from the original Date column follow: MM-DD-YYYY
mutate(Date = as.Date(Date)) %>%
mutate(Date = format(Date, format = "%m%d%Y")) %>%
mutate(Date = as.Date(Date))
space_mission_selected %>%
# Add the verb mutate to create a column Date from the original Date column follow: MM-DD-YYYY
mutate(Date = as.Date(Date)) %>%
mutate(Date = format(Date, format = "%m%d%Y"))
space_mission_selected %>%
# Add the verb mutate to create a column Date from the original Date column follow: MM-DD-YYYY
mutate(Date = as.Date(Date)) %>%
mutate(Date = format(Date, format = "%m-%d%-Y")
# Convert 'date' column to Date format
space_mission_date_formatted <- space_mission_selected %>%
# Convert 'date' column to Date format
space_mission_date_formatted <- space_mission_selected %>%
# Add the verb mutate to create a column Date from the original Date column follow: MM-DD-YYYY
mutate(Date = as.Date(Date)) %>%
glimpse(space_mission_selected)
# Convert 'date' column to Date format
space_mission_date_formatted <- space_mission_selected %>%
# Add the verb mutate to create a column Date from the original Date column follow: MM-DD-YYYY
mutate(Date = as.Date(Date))
glimpse(space_mission_selected)
glimpse(space_mission_date_formatted)
# Another way of taking a look at the dataset
print(space_mission_date_formatted)
# Lubridate is an R package that provides a comprehensive and user-friendly way to work with dates and times in R.
library(lubridate)
space_mission_2000 <- space_mission_selected %>%
filter(year(Date) == 2000) # year function is from lubridate not dplyr
head(space_mission_2000)
space_mission_2000 <- space_mission_2000 %>%
# $1 in 2000 is equivalent to purchasing power of about $1.77 today
mutate(PriceNow = Price * 1.77) %>%
arrange(desc(PriceNow))
# Take a look at the new space_mission_2000
head(space_mission_2000)
space_mission_2000 %>%
# Select  Mission, Missionstatus, Price
select(Mission, MissionStatus, Price) %>%
# Add the PriceNow variable
mutate(PriceNow = Price * 1.77) %>%
# Determine the distribution of price
mutate(PriceDistribution = PriceNow / sum(PriceNow)) %>%
# Filter for PriceDistribution more than 2%
filter(PriceDistribution >= 0.02) %>%
# Arrange distribution of men in descending order
arrange(desc(PriceDistribution))
# First we have to remove the null values
space_mission_2000 <- na.omit(space_mission_2000)
space_mission_2000 %>%
# Select  Mission, Missionstatus, Price
select(Mission, MissionStatus, Price) %>%
# Add the PriceNow variable
mutate(PriceNow = Price * 1.77) %>%
# Determine the distribution of price
mutate(PriceDistribution = PriceNow / sum(PriceNow)) %>%
# Filter for PriceDistribution more than 2%
filter(PriceDistribution >= 0.02) %>%
# Arrange distribution of men in descending order
arrange(desc(PriceDistribution))
space_mission_2000 %>%
# Select  Mission, Missionstatus, Price
select(Mission, MissionStatus, Price) %>%
# Add the PriceNow variable
# mutate(PriceNow = Price * 1.77) %>%
# Determine the distribution of price
mutate(PriceDistribution = Price / sum(Price)) %>%
# Filter for PriceDistribution more than 2%
filter(PriceDistribution >= 0.02) %>%
# Arrange distribution of men in descending order
arrange(desc(PriceDistribution))
# Filter for PriceDistribution more than 2%
filter(PriceDistribution >= 0.02) %>%
# Arrange distribution of men in descending order
arrange(desc(PriceDistribution))
# Filter for PriceDistribution more than 2%
filter(Price >= 0.02) %>%
# Arrange distribution of men in descending order
arrange(desc(PriceD))
space_mission_2000 <- space_mission_2000 %>%
# $1 in 2000 is equivalent to purchasing power of about $1.77 today
mutate(PriceNow = Price * 1.77) %>%
arrange(desc(PriceNow))
# Take a look at the new space_mission_2000
head(space_mission_2000)
# First we have to remove the null values
space_mission_2000 <- na.omit(space_mission_2000)
# Filter for PriceDistribution more than 2%
filter(Price >= 0.02) %>%
# Arrange distribution of men in descending order
arrange(desc(Price))
space_mission_2000 %>%
# Select  Mission, Missionstatus, Price
select(Mission, MissionStatus, Price) %>%
# Determine the distribution of price
mutate(Price = Price / sum(Price)) %>%
# Format
mutate(Price = round(Price * 100, 2))
# Filter for Price more than 2%
filter(PriceDistribution >= 0.02) %>%
# Arrange distribution of men in descending order
arrange(desc(PriceDistribution))
# Filter for Price more than 2%
filter(PriceDistribution >= 0.02) %>%
# Arrange distribution of men in descending order
arrange(desc(PriceDistribution))
space_mission_2000 %>%
# Select Mission, Missionstatus, Price
select(Mission, MissionStatus, Price) %>%
# Determine the distribution of price
mutate(PriceDistribution = Price / sum(Price)) %>%
# Format
mutate(PriceDistribution = round(PriceDistribution * 100, 2)) %>%
# Filter for Price more than 2%
filter(PriceDistribution >= 0.02) %>%
# Arrange distribution of rocket expenses in descending order
arrange(desc(PriceDistribution))
space_mission_2000 %>%
# Select Mission, Missionstatus, Price
select(Mission, MissionStatus, Price) %>%
# Determine the distribution of price
mutate(PriceDistribution = Price / sum(Price)) %>%
# Format the Price Distribution in percentages with two decimal places
mutate(PriceDistribution = round(PriceDistribution * 100, 2), "%") %>%
# Filter for PriceDistribution more than 2%
filter(PriceDistribution >= 0.02) %>%
# Arrange distribution of rocket expenses in descending order
arrange(desc(PriceDistribution))
space_mission_2000 %>%
# Select Mission, Missionstatus, Price
select(Mission, MissionStatus, Price) %>%
# Determine the distribution of price
mutate(PriceDistribution = Price / sum(Price)) %>%
# Format the Price Distribution in percentages with two decimal places
mutate(PriceDistribution = paste0(round(PriceDistribution * 100, 2), "%")) %>%
# Filter for PriceDistribution more than 2%
filter(PriceDistribution >= 0.02) %>%
# Arrange distribution of rocket expenses in descending order
arrange(desc(PriceDistribution))
space_mission_2000 %>%
# Select Mission, Missionstatus, Price
select(Mission, MissionStatus, Price) %>%
# Determine the distribution of price
mutate(PriceDistribution = Price / sum(Price)) %>%
# Format the Price Distribution in percentages with two decimal places
mutate(PriceDistribution = paste0(round(PriceDistribution * 100, 2), "%")) %>%
# Filter for PriceDistribution more than 2%
filter(PriceDistribution >= 0.02) %>%
# Arrange distribution of rocket expenses in descending order
arrange(desc(PriceDistribution))
