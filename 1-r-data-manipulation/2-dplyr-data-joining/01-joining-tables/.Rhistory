# Don't include the ingredients
select(-12) %>%
# Convert quantity to numeric
mutate(quantity = as.numeric(quantity),
# Calculate total sales for each pizza order
total_pizza_sales = price * quantity) %>%
# Arrange in descending order of total sales
arrange(desc(total_pizza_sales)) %>%
# Select the top 20 rows
head(20) %>%
# Count the type type of pizzas ordered
count(name) %>%
# Arrange by count in descending order
arrange(desc(n)) %>%
# Merge the top_20_sales with the pizza count
inner_join(top_20_sales, by = 'name')
library(dplyr) # for tabular data manipulation
library(lubridate)
wd <- getwd()
setwd("C:/Users/sclau/Documents/r-stats-programming-workshop/1-r-data-manipulation/2-dplyr-data-joining/01-joining-tables")
# INNER JOIN
# In many real-world scenarios, data is spread across multiple tables or datasets.
# Horizontal concatenation of data
# Inner join enables you to merge these tables by matching related records, creating a unified view of the data.
# This integration is crucial for performing comprehensive analysis and gaining insights from the combined information.
# SYNTAX: tibble1 pipe-operator
#           inner_join(tibble2, by = ('tibble_1_id', 'tibble_2_id'))
# Read the order. order_detail, pizza, and pizza_detail csv files
order <- read.csv("Pizza+Place+Sales/pizza_sales/orders.csv")
order_detail <- read.csv("Pizza+Place+Sales/pizza_sales/order_details.csv")
pizza <- read.csv("Pizza+Place+Sales/pizza_sales/pizzas.csv")
pizza_type <- read.csv("Pizza+Place+Sales/pizza_sales/pizza_types.csv")
head(order)
head(order_detail)
head(pizza)
head(pizza_type)
top_20_sales <- order %>%
# Add order details using an inner join
inner_join(order_detail, by = 'order_id') %>%
# Add pizzas using an inner join
inner_join(pizza, by = 'pizza_id') %>%
# Add pizza types using an inner join
inner_join(pizza_type, by = 'pizza_type_id') %>%
# Don't include the ingredients
select(-12) %>%
# Convert quantity to numeric
mutate(quantity = as.numeric(quantity),
# Calculate total sales for each pizza order
total_pizza_sales = price * quantity) %>%
# Arrange in descending order of total sales
arrange(desc(total_pizza_sales)) %>%
# Select the top 20 rows
head(20) %>%
# Count the type type of pizzas ordered
count(name) %>%
# Arrange by count in descending order
arrange(desc(n)) %>%
# Merge the top_20_sales with the pizza count
inner_join(top_20_sales, by = 'name')
# When was the top 20 highest pizza sales order?
top_20_sales <- order %>%
# Add order details using an inner join
inner_join(order_detail, by = 'order_id') %>%
# Add pizzas using an inner join
inner_join(pizza, by = 'pizza_id') %>%
# Add pizza types using an inner join
inner_join(pizza_type, by = 'pizza_type_id') %>%
# Don't include the ingredients
select(-12) %>%
# Convert quantity to numeric
mutate(quantity = as.numeric(quantity),
# Calculate total sales for each pizza order
total_pizza_sales = price * quantity) %>%
# Arrange in descending order of total sales
arrange(desc(total_pizza_sales)) %>%
# Select the top 20 rows
head(20)
top_20_sales %>%
# Count the type type of pizzas ordered
count(name) %>%
# Arrange by count in descending order
arrange(desc(n)) %>%
# Merge the top_20_sales with the pizza count
inner_join(top_20_sales, by = 'name')
# When was the top 20 highest pizza sales order and what were the commonly bought pizzas?
top_20_sales_commonly_bought <- top_20_sales %>%
# Count the type type of pizzas ordered
count(name) %>%
# Arrange by count in descending order
arrange(desc(n)) %>%
# Merge the top_20_sales with the pizza count
inner_join(top_20_sales, by = 'name')
View(top_20_sales_commonly_bought)
top_20_sales_by_category <- order %>%
# Add order details using an inner join
inner_join(order_detail, by = 'order_id') %>%
# Add pizzas using an inner join
inner_join(pizza, by = 'pizza_id') %>%
# Add pizza types using an inner join
inner_join(pizza_type, by = 'pizza_type_id') %>%
# Don't include the ingredients
select(-12) %>%
# Convert quantity to numeric
mutate(quantity = as.numeric(quantity),
# Calculate total sales for each pizza order
total_pizza_sales = price * quantity) %>%
# Arrange in descending order of total sales
arrange(desc(total_pizza_sales)) %>%
# Select the top
head(20)
View(top_20_sales_by_category)
top_20_sales_by_category <- top_20_sales
# Count the type type of pizzas ordered
count(name,category) %>%
# Arrange by count in descending order
arrange(desc(n)) %>%
# Merge the top_20_sales with the pizza count
inner_join(top_20_sales_by_category, by = 'name') %>%
group_by(category) %>%
summarize(total_sales = sum(quantity * price, na.rm = TRUE)) %>%
arrange(desc(total_sales))
# What are the top 20 highest pizza sales order by category?
top_20_sales_by_category <- top_20_sales
# Count the type type of pizzas ordered
count(name,category) %>%
# Arrange by count in descending order
arrange(desc(n)) %>%
# Merge the top_20_sales with the pizza count
inner_join(top_20_sales_by_category, by = 'name') %>%
group_by(category) %>%
summarize(total_sales = sum(quantity * price, na.rm = TRUE)) %>%
arrange(desc(total_sales))
View(top_20_sales)
top_20_sales_by_category <- top_20_sales
# Count the type type of pizzas ordered
count(name,category) %>%
# Arrange by count in descending order
arrange(desc(n)) %>%
# Merge the top_20_sales with the pizza count
inner_join(top_20_sales, by = 'name') %>%
group_by(category) %>%
summarize(total_sales = sum(quantity * price, na.rm = TRUE)) %>%
arrange(desc(total_sales))
top_20_sales
# Count the type type of pizzas ordered
count(name,category) %>%
# Arrange by count in descending order
arrange(desc(n)) %>%
# What are the top 20 highest pizza sales order by category?
top_20_sales_by_category <- top_20_sales
# What are the top 20 highest pizza sales order by category?
top_20_sales_by_category <- top_20_sales
# Count the type type of pizzas ordered
count(category) %>%
# Arrange by count in descending order
arrange(desc(n)) %>%
group_by(category) %>%
summarize(total_sales = sum(quantity * price, na.rm = TRUE)) %>%
arrange(desc(total_sales))
top_20_sales
# Count the type type of pizzas ordered
count(category) %>%
# Arrange by count in descending order
arrange(desc(n)) %>%
top_20_sales
top_20_sales
# Count the type type of pizzas ordered
count(category) %>%
# Arrange by count in descending order
arrange(desc(n)) %>%
group_by(category) %>%
summarize(total_sales = sum(quantity * price, na.rm = TRUE)) %>%
top_20_sales
top_20_sales_by_category <- top_20_sales %>%
count(category) %>%  # Count the number of pizzas ordered in each category
arrange(desc(n)) %>%  # Arrange the counts in descending order
group_by(category) %>%
summarize(total_sales = sum(quantity * price, na.rm = TRUE)) %>%  # Calculate total sales for each category
arrange(desc(total_sales))  # Arrange the total sales in descending order
top_20_sales_by_category <- top_20_sales %>%
inner_join(order_detail, by = 'order_id') %>%
inner_join(pizza, by = 'pizza_id') %>%
inner_join(pizza_type, by = 'pizza_type_id') %>%
select(-12) %>%
mutate(quantity = as.numeric(quantity),
total_sales = quantity * price) %>%
filter(date >= ymd("2022-02-01") & date <= ymd("2022-06-30")) %>%
count(category) %>%
arrange(desc(n)) %>%
group_by(category) %>%
summarize(total_sales = sum(total_sales, na.rm = TRUE)) %>%
arrange(desc(total_sales))
top_20_sales_by_category <- top_20_sales %>%
inner_join(order_detail, by = 'order_id', relationship = "many-to-many") %>%
inner_join(pizza, by = 'pizza_id') %>%
inner_join(pizza_type, by = 'pizza_type_id') %>%
select(-12) %>%
mutate(quantity = as.numeric(quantity),
total_sales = quantity * price) %>%
filter(date >= ymd("2022-02-01") & date <= ymd("2022-06-30")) %>%
count(category) %>%
arrange(desc(n)) %>%
group_by(category) %>%
summarize(total_sales = sum(total_sales, na.rm = TRUE)) %>%
arrange(desc(total_sales))
top_20_sales_by_category <- top_20_sales %>%
inner_join(order_detail, by = c("order_id")) %>%
inner_join(pizza, by = c("pizza_id")) %>%
inner_join(pizza_type, by = c("pizza_type_id")) %>%
select(-12) %>%
mutate(quantity = as.numeric(quantity),
total_sales = quantity * price) %>%
filter(date >= ymd("2022-02-01") & date <= ymd("2022-06-30")) %>%
count(category) %>%
arrange(desc(n)) %>%
group_by(category) %>%
summarize(total_sales = sum(total_sales, na.rm = TRUE)) %>%
arrange(desc(total_sales))
View(top_20_sales_commonly_bought)
order %>%
# Add order details using an inner join
inner_join(order_detail, by = 'order_id') %>%
# Add pizzas using an inner join
inner_join(pizza, by = 'pizza_id') %>%
# Add pizza types using an inner join
inner_join(pizza_type, by = 'pizza_type_id') %>%
# Don't include the ingredients
select(-12) %>%
#
mutate(quantity = as.numeric(quantity)) %>%
library(dplyr) # for tabular data manipulation
library(dplyr) # for tabular data manipulation
wd <- getwd()
setwd("C:/Users/sclau/Documents/r-stats-programming-workshop/1-r-data-manipulation/2-dplyr-data-joining/02-left-and-right-joins")
# LEFT JOIN
# A left join returns all records from the left (or first) table and the matching records from the right (or second) table.
# If there are no matches found in the right table, the result will still include all the records from the left table.
# Unmatched records from the right table will have NULL values in the result.
# SYNTAX: tibble1 pipe-operator
#           left_join(tibble2, by = ('tibble_1_id', 'tibble_2_id'))
# Read the order. order_detail, pizza, and pizza_detail csv files
order <- read.csv("Pizza+Place+Sales/pizza_sales/orders.csv")
order_detail <- read.csv("Pizza+Place+Sales/pizza_sales/order_details.csv")
pizza <- read.csv("Pizza+Place+Sales/pizza_sales/pizzas.csv")
pizza_type <- read.csv("Pizza+Place+Sales/pizza_sales/pizza_types.csv")
# Add the correct verb, table, and joining column
order_and_details_l <- order %>%
left_join(order_detail, by = c('order_id' = 'order_id'))
# Join order_detail to order
order %>%
left_join(order_detail, by ="order_id", relationship = "many-to-many") %>%
# Filter for where quantity is na
filter(is.na(quantity))
head(order_and_details_l_total_pizza_type)
order_and_details_l_total_pizza_type <- order_and_details_l %>%
group_by(pizza_id) %>%
summarize(total_quantity = sum(quantity))
head(order_and_details_l_total_pizza_type)
wd <- getwd()
setwd("C:/Users/sclau/Documents/r-stats-programming-workshop/1-r-data-manipulation/2-dplyr-data-joining/01-joining-tables")
# INNER JOIN
# In many real-world scenarios, data is spread across multiple tables or datasets.
# Horizontal concatenation of data
# Inner join enables you to merge these tables by matching related records, creating a unified view of the data.
# This integration is crucial for performing comprehensive analysis and gaining insights from the combined information.
# SYNTAX: tibble1 pipe-operator
#           inner_join(tibble2, by = ('tibble_1_id', 'tibble_2_id'))
# Read the order. order_detail, pizza, and pizza_detail csv files
order <- read.csv("Pizza+Place+Sales/pizza_sales/orders.csv")
order_detail <- read.csv("Pizza+Place+Sales/pizza_sales/order_details.csv")
pizza <- read.csv("Pizza+Place+Sales/pizza_sales/pizzas.csv")
pizza_type <- read.csv("Pizza+Place+Sales/pizza_sales/pizza_types.csv")
# Add the correct verb, table, and joining column
order_and_details <- order %>%
inner_join(order_detail, by = c('order_id' = 'order_id'))
View(order_and_details)
View(order_and_details_l)
View(order)
View(order)
View(order_detail)
View(order_detail)
# Join order_detail to order
order %>%
left_join(order_detail, by ="order_id", relationship = "many-to-many") %>%
# Filter for where quantity is na
filter(is.na(quantity))
order_and_details_l_total_pizza_type <- order_and_details_l %>%
group_by(pizza_id) %>%
summarize(total_quantity = sum(quantity))
head(order_and_details_l_total_pizza_type)
# How many orders made for each type of pizza?
order_and_details_l_date <- order_and_details_l %>%
group_by(date) %>%
summarize(total_quantity = sum(quantity))
head(order_and_details_l_total_date)
# How many orders made for each type of pizza?
order_and_details_l_date <- order_and_details_l %>%
group_by(date) %>%
summarize(total_quantity = sum(quantity))
head(order_and_details_l_total_date)
head(order_and_details_l_date)
order_and_details <- order %>%
inner_join(order_detail, by ='order_id')
order_and_details <- order %>%
inner_join(order_detail, by ='order_id')
order_and_details_date <- order_and_details %>%
group_by(date) %>%
summarize(total_quantity = sum(quantity))
head(order_and_details_date)
order_and_details_l_date <- order_and_details_l %>%
group_by(date) %>%
summarize(total_quantity = sum(quantity))
head(order_and_details_l_date)
order_and_details <- order %>%
inner_join(order_detail, by ='order_id')
order_and_details_date <- order_and_details %>%
group_by(date) %>%
summarize(total_quantity = sum(quantity))
head(order_and_details_date)
# How many orders made for each date?
order_and_details_l_date <- order_and_details_l %>%
group_by(date) %>%
summarize(total_order = count(order_id))
# How many orders made for each date?
order_and_details_l_date <- order_and_details_l %>%
group_by(date) %>%
count(order_id))
# How many orders made for each date?
order_and_details_l_date <- order_and_details_l %>%
group_by(date) %>%
count(order_id)
head(order_and_details_l_date)
order_and_details <- order %>%
inner_join(order_detail, by ='order_id')
order_and_details_date <- order_and_details %>%
group_by(date) %>%
count(order_id)
head(order_and_details_date)
# How many orders made for each date?
order_and_details_l_date_count <- order_and_details_l %>%
group_by(date) %>%
count(order_id)
head(order_and_details_l_date_count)
order_and_details_date_count <- order_and_details %>%
group_by(date) %>%
count(order_id)
head(order_and_details_date_count)
order_and_details_l_date_count <- order_and_details_l %>%
group_by(date) %>%
summarize(count = n())
head(order_and_details_l_date_count)
order_and_details_date_count <- order_and_details %>%
group_by(date) %>%
summarize(count = n())
head(order_and_details_date_count)
View(order_and_details_l)
View(pizza_type)
pizza_l_total_sales_by_pizza <- order_and_details_l
left_join(pizza, c ='pizza_id') %>%
left_join(pizza_type, c ='pizza_type_id') %>%
group_by(name) %>%
# Convert quantity to numeric
mutate(quantity = as.numeric(quantity),
# Calculate total sales for each pizza order
total_pizza_sales = price * quantity) %>%
summarize(total_pizza_sales = sum(total_pizza_sales))
pizza_l_total_sales_by_pizza <- order_and_details_l %>%
left_join(pizza, by = 'pizza_id') %>%
left_join(pizza_type, by = 'pizza_type_id') %>%
group_by(name) %>%
mutate(quantity = as.numeric(quantity),
total_pizza_sales = price * quantity) %>%
summarize(total_pizza_sales = sum(total_pizza_sales))
head(pizza_l_total_sales_by_pizza)
pizza_l_total_sales_by_pizza <- order_and_details %>%
inner_join(pizza, by = 'pizza_id') %>%
inner_join(pizza_type, by = 'pizza_type_id') %>%
group_by(name) %>%
mutate(quantity = as.numeric(quantity),
total_pizza_sales = price * quantity) %>%
summarize(total_pizza_sales = sum(total_pizza_sales))
head(pizza_total_sales_by_pizza)
How much is each type of pizza?
# How much is each type of pizza?
pizza_l_total_sales_by_pizza <- order_and_details_l %>%
left_join(pizza, by = 'pizza_id') %>%
left_join(pizza_type, by = 'pizza_type_id') %>%
group_by(name) %>%
mutate(quantity = as.numeric(quantity),
total_pizza_sales = price * quantity) %>%
summarize(total_pizza_sales = sum(total_pizza_sales))
head(pizza_l_total_sales_by_pizza)
# COMPARE
pizza_total_sales_by_pizza <- order_and_details %>%
inner_join(pizza, by = 'pizza_id') %>%
inner_join(pizza_type, by = 'pizza_type_id') %>%
group_by(name) %>%
mutate(quantity = as.numeric(quantity),
total_pizza_sales = price * quantity) %>%
summarize(total_pizza_sales = sum(total_pizza_sales))
head(pizza_total_sales_by_pizza)
pizza_type_r <- pizza %>%
# Right join pizza_type
right_join(pizza_type, by = "pizza_type_id")
head(pizza_type_r)
View(pizza_type_r)
View(pizza)
View(pizza_type)
pizza_type_count_r <- pizza %>%
# Count the pizza_type_id
count(pizza_type_id) %>%
# Right join pizza_type
right_join(pizza_type, by = "pizza_type_id") %>%
# Filter for NA
filter(is.na(n))
print(pizza_type_count_r)
replace_na <- function(data, replacements) {
for (column in names(replacements)) {
data <- data %>% mutate(!!sym(column) := ifelse(is.na(!!sym(column)), replacements[[column]], !!sym(column)))
}
return(data)
}
pizza_type_count_r_replaced_na <- pizza %>%
# Count the pizza_type_id
count(pizza_type_id) %>%
# Right join pizza_type
right_join(pizza_type, by = "pizza_type_id") %>%
# Use replace_na to replace missing values in the n column
replace_na(list(n = 0))
head(pizza_type_count_r_replaced_na)
order_and_details_r <- order %>%
rightt_join(order_detail, by = c('order_id' = 'order_id'))
order_and_details_r <- order %>%
right_join(order_detail, by = c('order_id' = 'order_id'))
View(order_and_details_r)
View(order_and_details_l)
View(order_detail)
View(order_and_details)
View(order)
View(order_detail)
# How many orders made for each date?
order_and_details_r_date_count <- order_and_details_r %>%
group_by(date) %>%
summarize(count = n())
head(order_and_details_r_date_count)
order_and_details_l_date_count <- order_and_details_l %>%
group_by(date) %>%
summarize(count = n())
head(order_and_details_l_date_count)
order_and_details_date_count <- order_and_details %>%
group_by(date) %>%
summarize(count = n())
head(order_and_details_date_count)
# How much is each type of pizza?
pizza_r_total_sales_by_pizza <- order_and_details_r %>%
right_join(pizza, by = 'pizza_id') %>%
right_join(pizza_type, by = 'pizza_type_id') %>%
group_by(name) %>%
mutate(quantity = as.numeric(quantity),
total_pizza_sales = price * quantity) %>%
summarize(total_pizza_sales = sum(total_pizza_sales))
head(pizza_r_total_sales_by_pizza)
# How much is each type of pizza?
pizza_l_total_sales_by_pizza <- order_and_details_l %>%
left_join(pizza, by = 'pizza_id') %>%
left_join(pizza_type, by = 'pizza_type_id') %>%
group_by(name) %>%
mutate(quantity = as.numeric(quantity),
total_pizza_sales = price * quantity) %>%
summarize(total_pizza_sales = sum(total_pizza_sales))
head(pizza_l_total_sales_by_pizza)
pizza_total_sales_by_pizza <- order_and_details %>%
inner_join(pizza, by = 'pizza_id') %>%
inner_join(pizza_type, by = 'pizza_type_id') %>%
group_by(name) %>%
mutate(quantity = as.numeric(quantity),
total_pizza_sales = price * quantity) %>%
summarize(total_pizza_sales = sum(total_pizza_sales))
head(pizza_total_sales_by_pizza)
order_and_details_r %>%
right_join(pizza, by = 'pizza_id') %>%
right_join(pizza_type, by = 'pizza_type_id')
order_and_details_pizza_r <- order_and_details_r %>%
right_join(pizza, by = 'pizza_id')
View(order_and_details_pizza_r)
order_and_details_pizza_type_r <- order_and_details_pizza_r %>%
right_join(pizza_type, by = 'pizza__type_id')
order_and_details_pizza_type_r <- order_and_details_pizza_r %>%
right_join(pizza_type, by = 'pizza__type_id')
order_and_details_pizza_type_r <- order_and_details_pizza_r %>%
right_join(pizza_type, by = 'pizza_type_id')
View(order_and_details_pizza_type_r)
order_and_details_pizza_type_r %>%
filter(is.na(n))
order_and_details_pizza_type_r %>%
filter(is.na(n))
order_and_details_pizza_type_r %>%
filter(is.na(n))
order_and_details_pizza_type_r %>%
filter(!complete.cases(.))
# How much is each type of pizza?
pizza_r_total_sales_by_pizza <- order_and_details_r %>%
right_join(pizza, by = 'pizza_id') %>%
right_join(pizza_type, by = 'pizza_type_id') %>%
group_by(name) %>%
mutate(quantity = as.numeric(quantity),
total_pizza_sales = price * quantity) %>%
summarize(total_pizza_sales = sum(total_pizza_sales))
View(pizza_r_total_sales_by_pizza)
View(order_detail)
View(pizza)
View(pizza_type)
