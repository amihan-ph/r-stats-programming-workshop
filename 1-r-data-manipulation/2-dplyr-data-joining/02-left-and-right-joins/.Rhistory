demo()
install.packages(c('quantmod','ff','foreign','R.matlab'),dependency=T)
suppressPackageStartupMessages(library(tidyverse, dplyr))
data("ToothGrowth")
head(ToothGrowth)
str(ToothGrowth)
hist(ToothGrowth$len)
# Shapiro-Wilk normality test
#H0: data are normally distributed
shapiro.test(ToothGrowth$len) #data are normally distributed
view(ToothGrowth)
data("ToothGrowth")
head(ToothGrowth)
str(ToothGrowth)
View(ToothGrowth)
data("ToothGrowth")
head(ToothGrowth)
library(dplyr) # for functions
install.packages("dplyr")
library("dplyr", lib.loc="C:/Users/sclau/anaconda3/envs/rstudio/lib/R/library")
library("dbplyr", lib.loc="C:/Users/sclau/anaconda3/envs/rstudio/lib/R/library")
library(dplyr) # for functions
read_fst(
path,
columns = NULL,
from = 1,
to = NULL,
as.data.table = FALSE,
old_format = FALSE
)
library(dplyr) # for functions
library(dplyr) # for functions
read_fst('late_shipments.fst')
read_fst('late_shipments.fst')
data("ToothGrowth")
head(ToothGrowth)
str(ToothGrowth)
hist(ToothGrowth$len)
shapiro.test(ToothGrowth$len) #data are normally distributed
library(ggplot2)
qplot(supp,len,data=ToothGrowth,
main="Tooth growth of guinea pigs",xlab="Supplement type", ylab="Tooth length") + geom_boxplot(aes(fill = supp))
install.packages('ggplot2', dep = TRUE),
library(ggplot2)
qplot(supp,len,data=ToothGrowth,
main="Tooth growth of guinea pigs",xlab="Supplement type", ylab="Tooth length") + geom_boxplot(aes(fill = supp))
install.packages('ggplot2', dep = TRUE),
library(ggplot2)
install.packages('ggplot2', dep = TRUE)
install.packages("ggplot2", dep = TRUE)
library(ggplot2)
install.packages('ggplot2')
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
install.packages("ggplot2", dependencies=TRUE, type="source")
View(ToothGrowth)
install.packages("ggplot2", dependencies=TRUE)
install.packages('ggplot2')
library(ggplot2)
data("ToothGrowth")
head(ToothGrowth)
str(ToothGrowth)
hist(ToothGrowth$len)
# Shapiro-Wilk normality test
#H0: data are normally distributed
shapiro.test(ToothGrowth$len) #data are normally distributed
library(ggplot2)
qplot(supp,len,data=ToothGrowth,
main="Tooth growth of guinea pigs",xlab="Supplement type", ylab="Tooth length") + geom_boxplot(aes(fill = supp))
View(ToothGrowth)
shapiro.test(ToothGrowth$len)
mean(ToothGrowth$len)
t.test(ToothGrowth$len,mu=18)
### one sided t-test
### test if the mean value is equal to a certain number
### H0: true value of mean=18
t.test(ToothGrowth$len,mu=10)
### one sided t-test
### test if the mean value is equal to a certain number
### H0: true value of mean=18
t.test(ToothGrowth$len,mu=18)
install.packages("dplyr")
install.packages("fst")
# Read an FST file
late_shipments <- read_fst("late_shipments.fst")
library(dplyr) # for functions
library(fst)
# Read an FST file
late_shipments <- read_fst("late_shipments.fst")
# Read an FST file
late_shipments <- read_fst("/Users/sclau/Documents/01-upskill/DataCamp/datacamp-notes/Statistics Fundamentals with R.fst")
OJ = ToothGrowth$len[ToothGrowth$supp == 'OJ']
VC = ToothGrowth$len[ToothGrowth$supp == 'VC']
t.test(OJ, VC,
paired = FALSE, var.equal = FALSE, conf.level = 0.95)
t.test(OJ, VC,alternative = "greater",paired = FALSE)
late_shipments <- read_csv("/Telecom_Customer_Churn/telecom_customer_churn.csv")
install.pakkages("tidyverse")
install.packages("tidyverse")
# Read an FST file
customer_churn <- read_csv("/Telecom_Customer_Churn/telecom_customer_churn.csv")
# Read an FST file
customer_churn <- read.csv("/Telecom_Customer_Churn/telecom_customer_churn.csv")
# Read an FST file
customer_churn <- read.csv("Telecom_Customer_Churn/telecom_customer_churn.csv")
# Read an FST file
customer_churn <- read.csv("telecom_customer_churn.csv")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
library(dplyr) # for functions
library(tidyverse)
# Read an FST file
customer_churn <- read.csv("telecom_customer_churn.csv")
# Read an FST file
customer_churn <- read.csv("telecom_customer_churn")
# Read an FST file
customer_churn <- read.csv("C:\Users\sclau\Documents\01-upskill\DataCamp\datacamp-notes\Statistics Fundamentals with R\telecom_customer_churn")
# Read an FST file
customer_churn <- read.csv("\Users\sclau\Documents\01-upskill\DataCamp\datacamp-notes\Statistics Fundamentals with R\telecom_customer_churn")
# Read an FST file
customer_churn <- read.csv("C:/Users/sclau/Documents/01-upskill/DataCamp/datacamp-notes/Statistics Fundamentals with R/telecom_customer_churn.csv")
#Ho: The mean Total Revenue is the same for those that Churned and those that Stayed
#Ha: The mean Total Revenue is greater for those that Stayed and those that Churned
#HO:  MuStayed = MuChurned
#Ha:  MuStayed > MuChurned
install.packages("dplyr")
install.packages("tidyverse")
library(dplyr) # for functions
library(tidyverse)
# Read the customer churn csv file
customer_churn <- read.csv("telecom_customer_churn.csv")
# Install packages
install.packages("dplyr")
install.packages("tidyverse")
install.packages("ggplot2")
library(tidyverse) # for data tidying
sp500 <- read.csv("S&P 500 Stock Prices 2014-2017.csv")
wd <- getwd()
setwd(wd)
# Mean and Median
# Read the S&P 500 csv file
sp500 <- read.csv("S&P 500 Stock Prices 2014-2017.csv")
install.packages("tidyverse")
install.packages("dplyr")
install.packages("ggplot2")
library(tidyverse) # for data tidying
library(dplyr) # for tabular data manipulation
library(ggplot2) # for visualization
wd <- getwd()
setwd(wd)
wd <- getwd()
library(tidyverse) # for data tidying
library(dplyr) # for tabular data manipulation
library(magrittr)
library(ggplot2) # for visualization
library(lubridate) # for handling date fields
library(broom)
# Machine Learning
library(tidymodels)
library(modeltime)
# remotes::install_github("busine")
# Install packages
install.packages("tidyverse")
install.packages("dplyr")
install.packages("magrittr")
install.packages("ggplot2")
install.packages("lubridate")
install.packages("broom")
install.packages("tidymodels")
install.packages("modeltime")
install.packages(c("tidyverse", "dplyr", "magrittr", "ggplot2", "lubridate", "broom", "tidymodels", "modeltime", "modeltime.ensemble", "modeltime.resample", "timetk"))
library(tidyverse)
library(dplyr)
library(magrittr)
library(ggplot2)
library(lubridate)
library(broom)
library(tidymodels)
library(modeltime)
remotes::install_github("business-science/modeltime.gluonts")
remotes::install_github("business-science/modeltime.gluonts")
install.packages("modeltime", dependencies = TRUE)
library(modeltime)
shiny::runApp('shinyApps/hsbc')
library(dplyr) # for tabular data manipulation
wd <- getwd()
setwd("C:/Users/sclau/Documents/r-stats-programming-workshop/1-r-data-manipulation/2-dplyr-data-joining/02-left-and-right-joins")
order <- read.csv("Pizza+Place+Sales/pizza_sales/orders.csv")
order_detail <- read.csv("Pizza+Place+Sales/pizza_sales/order_details.csv")
pizza <- read.csv("Pizza+Place+Sales/pizza_sales/pizzas.csv")
pizza_type <- read.csv("Pizza+Place+Sales/pizza_sales/pizza_types.csv")
View(order)
View(order_detail)
# Add the verb, table, and left joining the tables
order_and_details_l <- order %>%
left_join(order_detail, by = ('order_id'))
View(order_and_details_l)
# Read the order. order_detail, pizza, and pizza_detail csv files
order <- read.csv("Pizza+Place+Sales/pizza_sales/orders.csv")
order_detail <- read.csv("Pizza+Place+Sales/pizza_sales/order_details.csv")
pizza <- read.csv("Pizza+Place+Sales/pizza_sales/pizzas.csv")
pizza_type <- read.csv("Pizza+Place+Sales/pizza_sales/pizza_types.csv")
Compare with the result from order_and_details
order_and_details_l <- order %>%
left_join(order_detail, by = ('order_id'))
View(order_and_details_l)
View(order_and_details)
order_and_details <- order %>%
inner_join(order_detail, by ='order_id')
View(order_and_details)
# Join order_detail to order
order %>%
left_join(order_detail, by ="order_id") %>%
# Filter for where quantity is na to show the sample that cannot be matched
filter(is.na(quantity))
# How many orders made for each date?
order_and_details_l_date_count <- order_and_details_l %>%
group_by(date) %>%
summarize(count = n())
head(order_and_details_l_date_count)
order_and_details_date_count <- order_and_details %>%
group_by(date) %>%
summarize(count = n())
head(order_and_details_date_count)
# How much is each type of pizza?
pizza_l_total_sales_by_pizza <- order_and_details_l %>%
left_join(pizza, by = 'pizza_id') %>%
left_join(pizza_type, by = 'pizza_type_id') %>%
group_by(name) %>%
mutate(quantity = as.numeric(quantity),
total_pizza_sales = price * quantity) %>%
summarize(total_pizza_sales = sum(total_pizza_sales))
head(pizza_l_total_sales_by_pizza)
# COMPARE WITH INNER JOIN
pizza_total_sales_by_pizza <- order_and_details %>%
inner_join(pizza, by = 'pizza_id') %>%
inner_join(pizza_type, by = 'pizza_type_id') %>%
group_by(name) %>%
mutate(quantity = as.numeric(quantity),
total_pizza_sales = price * quantity) %>%
summarize(total_pizza_sales = sum(total_pizza_sales))
head(pizza_total_sales_by_pizza)
# Read the order. order_detail, pizza, and pizza_detail csv files
order <- read.csv("Pizza+Place+Sales/pizza_sales/orders.csv")
order_detail <- read.csv("Pizza+Place+Sales/pizza_sales/order_details.csv")
pizza <- read.csv("Pizza+Place+Sales/pizza_sales/pizzas.csv")
pizza_type <- read.csv("Pizza+Place+Sales/pizza_sales/pizza_types.csv")
# Compare with the result from order_and_details
order_and_details <- order %>%
inner_join(order_detail, by ='order_id')
View(order_and_details)
# Add the verb, table, and left joining the tables
order_and_details_l <- order %>%
left_join(order_detail, by = ('order_id'))
View(order_and_details_l)
# Join order_detail to order
order %>%
left_join(order_detail, by ="order_id") %>%
# Filter for where quantity is na to show the sample that cannot be matched
filter(is.na(quantity))
# How many orders made for each date?
order_and_details_l_date_count <- order_and_details_l %>%
group_by(date) %>%
summarize(count = n())
head(order_and_details_l_date_count)
# COMPARE WITH INNER JOIN
order_and_details_date_count <- order_and_details %>%
group_by(date) %>%
summarize(count = n())
head(order_and_details_date_count)
# How much is each type of pizza?
pizza_l_total_sales_by_pizza <- order_and_details_l %>%
left_join(pizza, by = 'pizza_id') %>%
left_join(pizza_type, by = 'pizza_type_id') %>%
group_by(name) %>%
mutate(quantity = as.numeric(quantity),
total_pizza_sales = price * quantity) %>%
summarize(total_pizza_sales = sum(total_pizza_sales))
head(pizza_l_total_sales_by_pizza)
# COMPARE WITH INNER JOIN
pizza_total_sales_by_pizza <- order_and_details %>%
inner_join(pizza, by = 'pizza_id') %>%
inner_join(pizza_type, by = 'pizza_type_id') %>%
group_by(name) %>%
mutate(quantity = as.numeric(quantity),
total_pizza_sales = price * quantity) %>%
summarize(total_pizza_sales = sum(total_pizza_sales))
head(pizza_total_sales_by_pizza)
order_and_details_r <- order %>%
right_join(order_detail, by = c('order_id' = 'order_id'))
View(order_and_details_r)
# How many orders made for each date?
order_and_details_r_date_count <- order_and_details_r %>%
group_by(date) %>%
summarize(count = n())
head(order_and_details_r_date_count)
# How much is each type of pizza?
pizza_r_total_sales_by_pizza <- order_and_details_r %>%
right_join(pizza, by = 'pizza_id') %>%
right_join(pizza_type, by = 'pizza_type_id') %>%
group_by(name) %>%
mutate(quantity = as.numeric(quantity),
total_pizza_sales = price * quantity) %>%
summarize(total_pizza_sales = sum(total_pizza_sales))
head(pizza_r_total_sales_by_pizza)
View(pizza_r_total_sales_by_pizza)
order_and_details_pizza_r <- order_and_details_r %>%
right_join(pizza, by = 'pizza_id')
View(order_and_details_pizza_r)
order_and_details_pizza_type_r <- order_and_details_pizza_r %>%
right_join(pizza_type, by = 'pizza_type_id')
View(order_and_details_pizza_type_r)
# Look at null order_id and order_details_id since this column for joining
filtered_r_na <- order_and_details_pizza_type_r %>%
filter(is.na(order_id), is.na(order_details_id))
View(filtered_r_na)
View(order_and_details)
View(order_and_details_l)
View(order_and_details)
View(order)
View(order_detail)
View(pizza)
View(pizza_type)
View(order_and_details_r)
