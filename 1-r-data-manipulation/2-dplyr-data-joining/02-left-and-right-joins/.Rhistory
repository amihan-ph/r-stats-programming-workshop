demo()
install.packages(c('quantmod','ff','foreign','R.matlab'),dependency=T)
suppressPackageStartupMessages(library(tidyverse, dplyr))
data("ToothGrowth")
head(ToothGrowth)
str(ToothGrowth)
hist(ToothGrowth$len)
# Shapiro-Wilk normality test
#H0: data are normally distributed
shapiro.test(ToothGrowth$len) #data are normally distributed
view(ToothGrowth)
data("ToothGrowth")
head(ToothGrowth)
str(ToothGrowth)
View(ToothGrowth)
data("ToothGrowth")
head(ToothGrowth)
library(dplyr) # for functions
install.packages("dplyr")
library("dplyr", lib.loc="C:/Users/sclau/anaconda3/envs/rstudio/lib/R/library")
library("dbplyr", lib.loc="C:/Users/sclau/anaconda3/envs/rstudio/lib/R/library")
library(dplyr) # for functions
read_fst(
path,
columns = NULL,
from = 1,
to = NULL,
as.data.table = FALSE,
old_format = FALSE
)
library(dplyr) # for functions
library(dplyr) # for functions
read_fst('late_shipments.fst')
read_fst('late_shipments.fst')
data("ToothGrowth")
head(ToothGrowth)
str(ToothGrowth)
hist(ToothGrowth$len)
shapiro.test(ToothGrowth$len) #data are normally distributed
library(ggplot2)
qplot(supp,len,data=ToothGrowth,
main="Tooth growth of guinea pigs",xlab="Supplement type", ylab="Tooth length") + geom_boxplot(aes(fill = supp))
install.packages('ggplot2', dep = TRUE),
library(ggplot2)
qplot(supp,len,data=ToothGrowth,
main="Tooth growth of guinea pigs",xlab="Supplement type", ylab="Tooth length") + geom_boxplot(aes(fill = supp))
install.packages('ggplot2', dep = TRUE),
library(ggplot2)
install.packages('ggplot2', dep = TRUE)
install.packages("ggplot2", dep = TRUE)
library(ggplot2)
install.packages('ggplot2')
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
install.packages("ggplot2", dependencies=TRUE, type="source")
View(ToothGrowth)
install.packages("ggplot2", dependencies=TRUE)
install.packages('ggplot2')
library(ggplot2)
data("ToothGrowth")
head(ToothGrowth)
str(ToothGrowth)
hist(ToothGrowth$len)
# Shapiro-Wilk normality test
#H0: data are normally distributed
shapiro.test(ToothGrowth$len) #data are normally distributed
library(ggplot2)
qplot(supp,len,data=ToothGrowth,
main="Tooth growth of guinea pigs",xlab="Supplement type", ylab="Tooth length") + geom_boxplot(aes(fill = supp))
View(ToothGrowth)
shapiro.test(ToothGrowth$len)
mean(ToothGrowth$len)
t.test(ToothGrowth$len,mu=18)
### one sided t-test
### test if the mean value is equal to a certain number
### H0: true value of mean=18
t.test(ToothGrowth$len,mu=10)
### one sided t-test
### test if the mean value is equal to a certain number
### H0: true value of mean=18
t.test(ToothGrowth$len,mu=18)
install.packages("dplyr")
install.packages("fst")
# Read an FST file
late_shipments <- read_fst("late_shipments.fst")
library(dplyr) # for functions
library(fst)
# Read an FST file
late_shipments <- read_fst("late_shipments.fst")
# Read an FST file
late_shipments <- read_fst("/Users/sclau/Documents/01-upskill/DataCamp/datacamp-notes/Statistics Fundamentals with R.fst")
OJ = ToothGrowth$len[ToothGrowth$supp == 'OJ']
VC = ToothGrowth$len[ToothGrowth$supp == 'VC']
t.test(OJ, VC,
paired = FALSE, var.equal = FALSE, conf.level = 0.95)
t.test(OJ, VC,alternative = "greater",paired = FALSE)
late_shipments <- read_csv("/Telecom_Customer_Churn/telecom_customer_churn.csv")
install.pakkages("tidyverse")
install.packages("tidyverse")
# Read an FST file
customer_churn <- read_csv("/Telecom_Customer_Churn/telecom_customer_churn.csv")
# Read an FST file
customer_churn <- read.csv("/Telecom_Customer_Churn/telecom_customer_churn.csv")
# Read an FST file
customer_churn <- read.csv("Telecom_Customer_Churn/telecom_customer_churn.csv")
# Read an FST file
customer_churn <- read.csv("telecom_customer_churn.csv")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
library(dplyr) # for functions
library(tidyverse)
# Read an FST file
customer_churn <- read.csv("telecom_customer_churn.csv")
# Read an FST file
customer_churn <- read.csv("telecom_customer_churn")
# Read an FST file
customer_churn <- read.csv("C:\Users\sclau\Documents\01-upskill\DataCamp\datacamp-notes\Statistics Fundamentals with R\telecom_customer_churn")
# Read an FST file
customer_churn <- read.csv("\Users\sclau\Documents\01-upskill\DataCamp\datacamp-notes\Statistics Fundamentals with R\telecom_customer_churn")
# Read an FST file
customer_churn <- read.csv("C:/Users/sclau/Documents/01-upskill/DataCamp/datacamp-notes/Statistics Fundamentals with R/telecom_customer_churn.csv")
#Ho: The mean Total Revenue is the same for those that Churned and those that Stayed
#Ha: The mean Total Revenue is greater for those that Stayed and those that Churned
#HO:  MuStayed = MuChurned
#Ha:  MuStayed > MuChurned
install.packages("dplyr")
install.packages("tidyverse")
library(dplyr) # for functions
library(tidyverse)
# Read the customer churn csv file
customer_churn <- read.csv("telecom_customer_churn.csv")
# Install packages
install.packages("dplyr")
install.packages("tidyverse")
install.packages("ggplot2")
library(tidyverse) # for data tidying
sp500 <- read.csv("S&P 500 Stock Prices 2014-2017.csv")
wd <- getwd()
setwd(wd)
# Mean and Median
# Read the S&P 500 csv file
sp500 <- read.csv("S&P 500 Stock Prices 2014-2017.csv")
install.packages("tidyverse")
install.packages("dplyr")
install.packages("ggplot2")
library(tidyverse) # for data tidying
library(dplyr) # for tabular data manipulation
library(ggplot2) # for visualization
wd <- getwd()
setwd(wd)
wd <- getwd()
# Install packages
install.packages("dplyr")
library(dplyr) # for tabular data manipulation
wd <- getwd()
setwd("C:/Users/sclau/Documents/r-stats-programming-workshop/1-r-data-manipulation/2-dplyr-data-joining/01-joining-tables")
# INNER JOIN
# In many real-world scenarios, data is spread across multiple tables or datasets.
# Inner joins enables you to merge these tables by matching related records, creating a unified view of the data.
# This integration is crucial for performing comprehensive analysis and gaining insights from the combined information.
# Read the order. order_detail, pizza, and pizza_detail csv files
order <- read.csv("Pizza+Place+Sales/pizza_sales/orders.csv")
order_detail <- read.csv("Pizza+Place+Sales/pizza_sales/order_details.csv")
pizza <- read.csv("Pizza+Place+Sales/pizza_sales/pizzas.csv")
pizza_type <- read.csv("Pizza+Place+Sales/pizza_sales/pizza_types.csv")
# Add the correct verb, table, and joining column
order_and_details <- order %>%
inner_join(order_detail, by = c('order_id' = 'order_id'))
# If they have the same id names in both tables. you can simply use by = 'id_name'
print(order_and_details)
ordered_pizzas <- order_and_details %>%
inner_join(pizza, by = "pizza_id")
print(ordered_pizzas)
# Install packages
install.packages("dplyr")
library(dplyr) # for tabular data manipulation
wd <- getwd()
setwd("C:/Users/sclau/Documents/r-stats-programming-workshop/1-r-data-manipulation/2-dplyr-data-joining/01-joining-tables")
# LEFT JOIN
# A left join returns all records from the left (or first) table and the matching records from the right (or second) table.
# If there are no matches found in the right table, the result will still include all the records from the left table.
# Unmatched records from the right table will have NULL values in the result.
# RIGHT JOIN
# A right join returns all records from the right (or second) table and the matching records from the left (or first) table.
# If there are no matches found in the left table, the result will still include all the records from the right table.
# Unmatched records from the left table will have NULL values in the result.
# Left and right joins are useful when you want to include all the records from one table,
# regardless of whether there is a match in the other table. They allow you to combine data and
# maintain the integrity of both tables while handling missing or unmatched records.
# It's important to note that the choice between left and right joins depends on the specific scenario
# and the desired outcome. You would typically select the table that contains the essential records or
# acts as the primary source of data as the preserved table in the join operation.
# Read the order. order_detail, pizza, and pizza_detail csv files
order <- read.csv("Pizza+Place+Sales/pizza_sales/orders.csv")
order_detail <- read.csv("Pizza+Place+Sales/pizza_sales/order_details.csv")
pizza <- read.csv("Pizza+Place+Sales/pizza_sales/pizzas.csv")
pizza_type <- read.csv("Pizza+Place+Sales/pizza_sales/pizza_types.csv")
install.packages("dplyr")
# Add the correct verb, table, and joining column
order_and_details_l <- order %>%
left_join(order_detail, by = c('order_id' = 'order_id'))
library(dplyr)
# Add the correct verb, table, and joining column
order_and_details_l <- order %>%
left_join(order_detail, by = c('order_id' = 'order_id'))
View(pizza)
View(pizza_type)
# Aggregate Millennium Falcon for the total quantity in each part
order_and_details_l_total_pizza_type <- order_and_details_l %>%
group_by(pizza_id) %>%
summarize(total_quantity = sum(quantity))
print(order_and_details_l_total_pizza_type)
pizza_l_total_price_pizza_type <- pizza %>%
group_by(pizza_id) %>%
summarize(total_quantity = sum(price))
print(pizza_l_total_price_pizza_type)
# Left join the Millennium Falcon colors to the Star Destroyer colors
order_and_details_l_total_pizza_type %>%
left_join(pizza_l_total_price_pizza_type, by = "pizza_id")
# Left join the Millennium Falcon colors to the Star Destroyer colors
order_and_details_l_total_pizza_type %>%
left_join(pizza_l_total_price_pizza_type, by = "pizza_id")
# Aggregate Star Destroyer for the total quantity in each part
pizza_l_total_price_pizza_type <- pizza %>%
group_by(pizza_id) %>%
summarize(total_price = sum(price))
print(pizza_l_total_price_pizza_type)
# Left join the Millennium Falcon colors to the Star Destroyer colors
order_and_details_l_total_pizza_type %>%
left_join(pizza_l_total_price_pizza_type, by = "pizza_id")
View(order)
View(order_and_details)
pizza_l_total_price_pizza_type <- pizza %>%
group_by(pizza_id) %>%
summarize(ave_price = mean(price))
print(pizza_l_total_price_pizza_type)
# Left join the Millennium Falcon colors to the Star Destroyer colors
order_and_details_l_total_pizza_type %>%
left_join(pizza_l_total_price_pizza_type, by = "pizza_id")
pizza_l_total_price_pizza_type <- pizza %>%
group_by(pizza_id) %>%
summarize(ave_price = mean(price))
print(pizza_l_total_price_pizza_type)
# How much is the average price for each type of pizza?
pizza_l_total_price_pizza_type <- pizza %>%
group_by(pizza_id) %>%
summarize(price)
print(pizza_l_total_price_pizza_type)
# What is the unit price for each type of pizza?
order_and_details_l_total_pizza_type %>%
left_join(pizza_l_total_price_pizza_type, by = "pizza_id")
# How much is each type of pizza?
pizza_l_total_price_pizza_type <- pizza %>%
group_by(pizza_id) %>%
summarize(unit_price = price)
print(pizza_l_total_price_pizza_type)
# What is the unit price for each type of pizza?
order_and_details_l_total_pizza_type %>%
left_join(pizza_l_total_price_pizza_type, by = "pizza_id")
mutate(total_price = total_quantity * unit_price)
# What is the unit price for each type of pizza?
order_and_details_l_total_pizza_type %>%
left_join(pizza_l_total_price_pizza_type, by = "pizza_id") %>%
mutate(total_price = total_quantity * unit_price)
# How much is the total sales for each type of pizza?
total_sales <- order_and_details_l_total_pizza_type %>%
left_join(pizza_l_total_price_pizza_type, by = "pizza_id") %>%
mutate(total_sales = total_quantity * unit_price)
print(total_sales)
print(total_sales)
View(order_and_details_l)
View(order_and_details_l_total_pizza_type)
# Join versions to sets
order %>%
left_join(order_detail, by ="set_num") %>%
# Filter for where version is na
filter(is.na(quantity))
# Join versions to sets
order %>%
left_join(order_detail, by ="order_id") %>%
# Filter for where version is na
filter(is.na(quantity))
order %>%
# Count the part_cat_id
count(order_detail) %>%
# Right join part_categories
right_join(part_categories, by = "order_id")
View(order_detail)
order %>%
# Count the part_cat_id
count(order_details_id) %>%
# Right join part_categories
right_join(part_categories, by = "order_id")
order %>%
# Count the part_cat_id
count(order_details_id) %>%
# Right join part_categories
right_join(part_categories, by = "order_id") %>%
# Filter for NA
filter(is.na(quantity))
order %>%
# Count the part_cat_id
count(order_id) %>%
# Right join part_categories
right_join(part_categories, by = "order_id") %>%
# Filter for NA
filter(is.na(quantity))
order %>%
# Count the part_cat_id
count(order_id) %>%
# Right join part_categories
right_join(order_detail, by = "order_id") %>%
# Filter for NA
filter(is.na(quantity))
setwd("C:/Users/sclau/Documents/r-stats-programming-workshop/1-r-data-manipulation/2-dplyr-data-joining/02-left-and-right-joins")
# Read the order. order_detail, pizza, and pizza_detail csv files
order <- read.csv("Pizza+Place+Sales/pizza_sales/orders.csv")
order_detail <- read.csv("Pizza+Place+Sales/pizza_sales/order_details.csv")
pizza <- read.csv("Pizza+Place+Sales/pizza_sales/pizzas.csv")
pizza_type <- read.csv("Pizza+Place+Sales/pizza_sales/pizza_types.csv")
order %>%
# Count the part_cat_id
count(order_id) %>%
# Right join part_categories
right_join(order_detail, by = "order_id") %>%
# Filter for NA
filter(is.na(quantity))
View(order_and_details_l)
View(order)
View(order_detail)
order %>%
# Count the order_id
count(order_id) %>%
# Right join part_categories
right_join(order_detail, by = "order_id") %>%
# Filter for NA
filter(is.na(quantity))
setwd("C:/Users/sclau/Documents/r-stats-programming-workshop/1-r-data-manipulation/2-dplyr-data-joining/02-left-and-right-joins")
order <- read.csv("Pizza+Place+Sales/pizza_sales/orders.csv")
order_detail <- read.csv("Pizza+Place+Sales/pizza_sales/order_details.csv")
pizza <- read.csv("Pizza+Place+Sales/pizza_sales/pizzas.csv")
pizza_type <- read.csv("Pizza+Place+Sales/pizza_sales/pizza_types.csv")
order %>%
# Count the order_id
count(order_id) %>%
# Right join part_categories
right_join(order_detail, by = "order_id") %>%
# Filter for NA
filter(is.na(quantity))
order %>%
# Count the order_id
count(order_id) %>%
# Right join part_categories
right_join(order_detail, by = "order_id") %>%
# Filter for NA
filter(is.na(quantity))
order %>%
# Count the order_id
count(order_id) %>%
# Right join part_categories
right_join(order_detail, by = "order_id") %>%
order %>%
# Count the order_id
count(order_id) %>%
order_and_details_r <- order %>%
# Count the order_id
count(order_id) %>%
print(order_and_details_r)
order_and_details_r <- order %>%
# Count the order_id
count(order_id) %>%
print(order_and_details_r)
order_and_details_r <- order %>%
# Count the order_id
count(order_id) %>%
print(order_and_details_r)
order_and_details_r <- order %>%
# Count the order_id
count(order_id) %>%
# Right join part_categories
right_join(order_detail, by = "order_id") %>%
# Filter for NA
filter(is.na(quantity))
print(order_and_details_r)
order_and_details_r <- order %>%
# Count the order_id
#count(order_id) %>%
# Right join part_categories
right_join(order_detail, by = "order_id") %>%
# Filter for NA
# filter(is.na(quantity))
print(order_and_details_r)
order_and_details_r <- order %>%
# Count the order_id
#count(order_id) %>%
# Right join part_categories
right_join(order_detail, by = "order_id", relationship = "many-to-many") %>%
# Filter for NA
# filter(is.na(quantity))
print(order_and_details_r)
order_and_details_r <- order %>%
# Count the order_id
#count(order_id) %>%
# Right join part_categories
right_join(order_detail, by = "order_id") %>%
# Filter for NA
# filter(is.na(quantity))
print(order_and_details_r)
order_and_details_r <- order %>%
# Count the order_id
#count(order_id) %>%
# Right join part_categories
right_join(order_detail, by = "order_id", relationship = "many-to-many") %>%
# Filter for NA
# filter(is.na(quantity))
print(order_and_details_r)
View(order_and_details_r)
View(pizza)
setwd("C:/Users/sclau/Documents/r-stats-programming-workshop/1-r-data-manipulation/2-dplyr-data-joining/02-left-and-right-joins")
# Read the order. order_detail, pizza, and pizza_detail csv files
order <- read.csv("Pizza+Place+Sales/pizza_sales/orders.csv")
order_detail <- read.csv("Pizza+Place+Sales/pizza_sales/order_details.csv")
pizza <- read.csv("Pizza+Place+Sales/pizza_sales/pizzas.csv")
pizza_type <- read.csv("Pizza+Place+Sales/pizza_sales/pizza_types.csv")
order_and_details_r <- pizza_type %>%
# Count the order_id
#count(order_id) %>%
# Right join part_categories
right_join(pizza, by = "pizza_type_id", relationship = "many-to-many") %>%
# Filter for NA
# filter(is.na(quantity))
print(order_and_details_r)
order_and_details_r <- pizza_type %>%
# Count the order_id
#count(order_id) %>%
# Right join part_categories
right_join(pizza, by = "pizza_type_id") %>%
# Filter for NA
# filter(is.na(quantity))
print(order_and_details_r)
# Add the correct verb, table, and joining column
order_and_details_l <- order %>%
left_join(order_detail, by = c('order_id' = 'order_id'))
# Join versions to sets
order %>%
left_join(order_detail, by ="order_id") %>%
# Filter for where quanitty is na
filter(is.na(quantity))
